geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[36]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[37]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[38]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[39]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[40]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[41]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[42]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[43]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[44]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[45]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[46]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[47]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[48]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[49]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[50]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[51]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[52]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[53]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
cell <- cell_list[[54]]
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = Mean_Grey))+
geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
ggplot(peak_extracted_data[[2]][Cell_id == cell], aes(color = stimulus))+
geom_line(aes(x = time_frame, y = smooth_z))+
#geom_line(aes(x = time_frame, y = background))+
# geom_vline(xintercept = deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_borders[[1]][[1]])+
# geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[1]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_start)[[2]])+
#geom_vline(xintercept = unique(deconvolve_data_new_deriv[[1]][Cell_id == cell]$peaks_end_new)[[2]])
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_end_new)[[x]])))+
sapply(seq_along(1:length(unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start))), function(x)
ggplot2::geom_vline(ggplot2::aes(xintercept = unique(peak_extracted_data[[1]][Cell_id == cell]$peaks_start)[[x]])))
guigui()
guigui()
??FastLZeroSpikeInference::estimate_spikes
#'
#' @param var variable used for deconvolution. Use the denoised trace for good
#' performances ("gam_detrended" if using DPA noise estimation or "background_detrended"
#' if using pattern matching noise estimation)
#'
#'
#' @return
#' @export
#'
#' @examples
deconvolve <- function(norm_data, gam = 0.95, lambda = 1, var = "gam_detrended",
peak_frame = 10) {
'isnotna' <- Negate('is.na')
cells <- unique(norm_data$Cell_id)
stim_list <- unique(norm_data$stimulus)
norm_data <- norm_data[, Prev_stim := ifelse(stimulus != stim_list[1], stim_list[grep(stimulus[[1]], stim_list) -1], stim_list[1]), by = .(Cell_id, stimulus) ]
norm_data <- norm_data[, Prev_stim := stim_list[Prev_stim]]
cell_split <- split(norm_data, norm_data$Cell_id)
cell_split <- lapply(cell_split, function(x) x[, lag_stim := dplyr::lead(stimulus, 5, default = NA)])
cell_split <- lapply(cell_split, function(x) add_peak_info(x, gam = gam, lambda = lambda, var))
peaks_data <- lapply(cell_split, function(x) if(length(x$peak_frames)[[1]] != 0) {x[x$time_frame %in% x$peak_frames[[1]]]} )
cell_split <- lapply(cell_split, function(x) x[, stimulus := lag_stim])
data <- do.call(rbind, cell_split)
peaks_data <- do.call(rbind, peaks_data)
return(list(peaks_data, data))
}
#' subset_spike_frames
#'
#' @param dt1
#' @param dt2
#'
#' @return
#' @export
#'
#' @examples
subset_spike_frames <- function(dt1,dt2, peak_frame = 10){
# Retrieve indices of lines where a spike occurred in dt1
setkey(dt1, Cell_id, time_frame)
setkey(dt2, Cell_id, time_frame)
match_indices <- dt1[dt2, which = TRUE]
# create a border n lines later (for each spike)
end <- match_indices + peak_frame
dt1 <- dt1[, id := seq(1,length(dt1$Cell_id))]
# Extract the line + the n lines following each spike
res <- dt1[.(id = unlist(Map(':', match_indices, end))), on = .(id)]
# Add a grouping variable "blocs" to then compute the max on each of these parts
res <- res[, blocs := rep(1:(length(res$Cell_id)/(peak_frame+1)), each = peak_frame+1)]
return(res)
}
#' @param lambda
#' @param constraint
#' @param estimate_calcium
#' @param var
#' @param ESP
#'
#' @return
#' @export
#'
#' @examples
add_peak_info <- function(x, gam, lambda,constraint, estimate_calcium, var = var, ESP){
peak_data <- FastLZeroSpikeInference::estimate_spikes(x[[var]], gam = gam,
lambda = lambda,constraint = T)
x <- x[, c("deconvolved_trace", "peak_frames") :=
list(peak_data$estimated_calcium, list(peak_data$spikes))]
return(x)
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
deconvolve_data <- deconvolve(norm_data, var = "background_detrended",
lambda = 10000)
#'
#' @param var variable used for deconvolution. Use the denoised trace for good
#' performances ("gam_detrended" if using DPA noise estimation or "background_detrended"
#' if using pattern matching noise estimation)
#'
#'
#' @return
#' @export
#'
#' @examples
deconvolve <- function(norm_data, gam = 0.95, lambda = 1, var = "gam_detrended",
peak_frame = 10) {
'isnotna' <- Negate('is.na')
cells <- unique(norm_data$Cell_id)
stim_list <- unique(norm_data$stimulus)
norm_data <- norm_data[, Prev_stim := ifelse(stimulus != stim_list[1], stim_list[grep(stimulus[[1]], stim_list) -1], stim_list[1]), by = .(Cell_id, stimulus) ]
norm_data <- norm_data[, Prev_stim := stim_list[Prev_stim]]
cell_split <- split(norm_data, norm_data$Cell_id)
cell_split <- lapply(cell_split, function(x) x[, lag_stim := dplyr::lead(stimulus, 5, default = NA)])
cell_split <- lapply(cell_split, function(x) add_peak_info(x, gam = gam, lambda = lambda, var))
peaks_data <- lapply(cell_split, function(x) if(length(x$peak_frames)[[1]] != 0) {x[x$time_frame %in% x$peak_frames[[1]]]} )
cell_split <- lapply(cell_split, function(x) x[, stimulus := lag_stim])
data <- do.call(rbind, cell_split)
peaks_data <- do.call(rbind, peaks_data)
return(list(peaks_data, data))
}
#' subset_spike_frames
#'
#' @param dt1
#' @param dt2
#'
#' @return
#' @export
#'
#' @examples
subset_spike_frames <- function(dt1,dt2, peak_frame = 10){
# Retrieve indices of lines where a spike occurred in dt1
setkey(dt1, Cell_id, time_frame)
setkey(dt2, Cell_id, time_frame)
match_indices <- dt1[dt2, which = TRUE]
# create a border n lines later (for each spike)
end <- match_indices + peak_frame
dt1 <- dt1[, id := seq(1,length(dt1$Cell_id))]
# Extract the line + the n lines following each spike
res <- dt1[.(id = unlist(Map(':', match_indices, end))), on = .(id)]
# Add a grouping variable "blocs" to then compute the max on each of these parts
res <- res[, blocs := rep(1:(length(res$Cell_id)/(peak_frame+1)), each = peak_frame+1)]
return(res)
}
#'
#' @return
#' @export
#'
#' @examples
add_peak_info <- function(x, gam, lambda, var = var){
peak_data <- FastLZeroSpikeInference::estimate_spikes(x[[var]], gam = gam,
lambda = lambda,constraint = T)
x <- x[, c("deconvolved_trace", "peak_frames") :=
list(peak_data$estimated_calcium, list(peak_data$spikes))]
return(x)
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
deconvolve_data <- deconvolve(norm_data, var = "background_detrended",
lambda = 10000)
deconvolve_data
#'
#' @return
#' @export
#'
#' @examples
add_peak_info <- function(x, gam, lambda, var = var){
peak_data <- FastLZeroSpikeInference::estimate_spikes(x[[var]], gam = gam,
lambda = lambda,constraint = T,
estimate_calcium = T)
x <- x[, c("deconvolved_trace", "peak_frames") :=
list(peak_data$estimated_calcium, list(peak_data$spikes))]
return(x)
}
deconvolve_data <- deconvolve(norm_data, var = "background_detrended",
lambda = 10000)
deconvolve_data
getwd()
library(calipR)
?calipR::deconvolve
library(calipR)
guigui()
#' @param pattern_matching
#' @param posBank
#' @param negBank
#' @param windows
#' @param steps
#'
#' @return
#' @export
#'
#' @examples
downstream_analysis <- function(data, moving_thresh = 0.1, outlier_thresh = 2, mean_width = 20, DPA_width = 10, CN_DPA_width = 20,
mean_width_diff = 10, method = "gam", norm_var = "gam",
norm_width = 10, lambda = 100,
gam = 0.97, z_thresh = 3, delta_thresh = 0,
deconvolve_var = "gam_detrended", compare_groups = FALSE, false_pos = c(TRUE, FALSE), one_cell = FALSE, simulation = FALSE,
pattern_matching = FALSE, posBank = list(),
negBank = list(), windows = c(30,70,100)) {
lambda <- as.numeric(lambda)
gam <- as.numeric(gam)
if(one_cell == FALSE){
shiny::withProgress(message = "Analyzing Full Dataset", value = 0, detail = "Cleaning Data", {
if(pattern_matching == TRUE){
clean <-clean_data(data, moving_thresh, outlier_thresh, mean_width,
CN_DPA_width, DPA_width, mean_width_diff, method = "back")
shiny::incProgress(1/5, detail = "Estimating Background")
back <- patDetectR(clean, windows, new_len = 30, posBank,
negBank, Var = "Mean_Grey")
back <- backEstimatR(clean, back)
shiny::incProgress(1/5, detail = "Normalizing Data")
norm <- norm_df(back, var = "back", width = norm_width)
shiny::incProgress(1/5, detail = "Performing Deconvolution")
deconvolved <- deconvolve(norm, lambda = lambda, gam = gam, var = "background_detrended")
deconvolved <- peakExtractR(deconvolved[[1]], deconvolved[[2]],
threshold = z_thresh, delta_threshold = delta_thresh,
var = "background_detrended")
}
if(pattern_matching == FALSE){
clean <- clean_data(data, moving_thresh, outlier_thresh, mean_width,
CN_DPA_width, DPA_width, mean_width_diff)
shiny::incProgress(1/5, detail = "Estimating Background")
back <- calipR::backEstimate(clean, method = method)
shiny::incProgress(1/5, detail = "Normalizing Data")
norm <- calipR::norm_df(back, var = norm_var, width = norm_width)
shiny::incProgress(1/5, detail = "Performing Deconvolution")
deconvolved <- deconvolve(norm, lambda = lambda, gam = gam, var = deconvolve_var)
deconvolved <- peakExtractR(deconvolved[[1]], deconvolved[[2]],
threshold = z_thresh, delta_threshold = delta_thresh,
var = deconvolve_var)
}
if(length(deconvolved[[1]]$Cell_id) != 0){
if(false_pos == TRUE){
shiny::incProgress(1/5, detail = "Removing Estimated False Positives")
deconvolved <- keep_best_peaks(deconvolved)
}
shiny::incProgress(1/5, detail = "Computing Statistics")
res <- Analyze_Responses(deconvolved[[1]], clean, compare_groups = compare_groups,
one_cell = one_cell, simulation = simulation)
}
})
}
if(one_cell == TRUE){
shiny::withProgress(message = "Testing New Parameters", value = 0, detail = "Performing Deconvolution", {
if(pattern_matching == TRUE){
clean <- clean_data(data, moving_thresh, outlier_thresh, mean_width,
CN_DPA_width, DPA_width, mean_width_diff, method = "back")
back <- patDetectR(clean, windows, new_len = 30, posBank,
negBank, Var = "Mean_Grey")
back <- backEstimatR(clean, back)
norm <- norm_df(back, var = "back", width = norm_width)
deconvolved <- deconvolve(norm, lambda = lambda,gam = gam,
var = "background_detrended")
deconvolved <- peakExtractR(deconvolved[[1]], deconvolved[[2]],
threshold = z_thresh,
delta_threshold = delta_thresh,)
}
if(pattern_matching == FALSE){
clean <- clean_data(data, moving_thresh, outlier_thresh, mean_width,
CN_DPA_width, DPA_width, mean_width_diff)
back <- backEstimate(clean, method = method)
norm <- norm_df(back, var = norm_var, width = norm_width)
deconvolved <- deconvolve(norm, lambda = lambda, gam = gam,
var = deconvolve_var)
deconvolved <- peakExtractR(deconvolved[[1]], deconvolved[[2]],
var = deconvolve_var,
threshold = z_thresh,
delta_threshold = delta_thresh)
}
if(length(deconvolved[[1]]$Cell_id) != 0){
if(false_pos == TRUE){
deconvolved <- keep_best_peaks(deconvolved)
}
}
res <- "NO RES"
norm <- data
})
}
return(list(deconvolved[[1]], deconvolved[[2]], res))
}
library(calipR)
guigui()
