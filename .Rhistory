pattern_matching = input$patMatch_opt_bis,
posBank = posBank, negBank = negBank,
windows = as.integer(input$windows_bis))
})
shiny::observeEvent(input$plot_simulation_bis, {
data <- res_sim$res_bis
output$plot_cell_sim_bis <- shiny::renderPlot({
if(input$patMatch_opt_bis == TRUE){
p <- cell_plot(data[[2]], data[[1]], var = input$cell_plot_var, cell = input$cell_opt, line = "back", show_peak = input$show_peak_bis)
p
}
if(input$patMatch_opt_bis == FALSE){
p <- cell_plot(data[[2]], data[[1]], var = input$cell_plot_var, cell = input$cell_opt, line = "gam", show_peak = input$show_peak_bis)
p
}
})
})
### Analyze the full dataset
res_full <- shiny::reactiveValues(res = NULL)
# This block makes the check box "compare groups" reactive
shiny::observe({
group_value <- input$groups
shiny::updateCheckboxInput(shiny::getDefaultReactiveDomain(), "groups", value = group_value)
})
### This block codes alows to launch the analysis when the button analyze dataset is clicked on. It runs the whole analysis, on the whole dataset
shiny::observeEvent(input$patMatch, {
if(input$patMatch == TRUE){
output$posBank_field_full <- shiny::renderUI({
shiny::textInput(inputId = "posBank_full", "Positive Bank", placeholder = "Enter the name of the bank you want to use")
})
output$negBank_field_full <- shiny::renderUI({
shiny::textInput(inputId = "negBank_full", "Negative Bank", placeholder = "Enter the name of the bank you want to use")
})
output$window_field_full <- shiny::renderUI({
shiny::selectInput(inputId = "windows_full", "Windows", list("5" = 5,"10" = 10, "15" = 15,
"20" = 20, "25"=25,
"30"=30,"35"=35,
"40"=40,"45"=45,
"50"=50,"55"=55,
"60"=60,"65"=65,
"70"=70,"75"=75,
"80"=80,"85"=85,
"90"=90,"95"=35,
"100"=100,"105"=105,
"110"=110,"115"=115,
"120"=120,"125"=125),multiple=TRUE      )})
}
if(input$patMatch == FALSE){
output$posBank_field_full <- NULL
output$negBank_field_full <- NULL
output$window_field_full <- NULL
}
})
res <- shiny::observeEvent(input$ana_full_button, {
df_full <- calipR::get_full_df(paste(project$dir_path,project$db_file,sep="/"),
"df_full")
if(input$patMatch == TRUE){
posBank <- readRDS(paste(project$dir_path, input$posBank_full, sep = "/"))
negBank <- readRDS(paste(project$dir_path, input$negBank_full, sep = "/"))
posBank <- Filter(Negate(is.null), posBank)
negBank <- Filter(Negate(is.null), negBank)
}
else{
posBank <- list()
negBank <- list()
}
res_full$res <- downstream_analysis(df_full, z_thresh = input$peak_thresh_full_z,
delta_thresh = input$peak_thresh_full_delta, lambda = input$lambda_full, gam = input$gam_full,
false_pos = input$false_pos_full, compare_groups = input$groups,
pattern_matching = input$patMatch, posBank = posBank, negBank = negBank,
windows = as.integer(input$windows_full))
# Extracting and saving the data table containing one row for each peak with the informations
#about the peak
res1 <- res_full$res[[1]]
calipR::saveData(res1, paste(project$dir_path,project$db_file, sep ="/"), "peak_res")
# Extracting and saving the full data table updated
res2 <- res_full$res[[2]]
res2 <- data.table::setDT(res2)[, peak_frames := NULL]
calipR::saveData(res2, paste(project$dir_path,project$db_file, sep ="/"), "df_final")
res3_1 <- data.table::setDT(res_full$res[[3]][[1]])
calipR::saveData(res3_1, paste(project$dir_path,project$db_file, sep ="/"), "stats_desc_final")
if(input$groups == TRUE){print( "it is true")}
else{
res3_3_1 <- data.table::setDT(res_full$res[[3]][[2]][[1]])
calipR::saveData(res3_3_1, paste(project$dir_path,project$db_file, sep ="/"), "overall_q")
res3_3_2 <- data.table::setDT(res_full$res[[3]][[2]][[2]])
calipR::saveData(res3_3_2, paste(project$dir_path,project$db_file, sep ="/"), "pairwise")
}
})
# retrieving full dataset and peaks dataset :
result <- reactiveValues()
res <- shiny::eventReactive(input$update_button,{
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
}
else{
path <- paste(project$dir_path,project$db_file, sep ="/")
full <- calipR::get_full_df(path, "df_final")
peaks <- calipR::get_full_df(path, "peak_res")
result$full <- full
result$peaks <- peaks
}
if(input$base_resp == TRUE){
peaks_wo_base <- data.table::setDT(calipR::base_resp.rm(result$peaks, result$full)[[1]])
full_wo_base <- data.table::setDT(calipR::base_resp.rm(peaks, full)[[2]])
res <- Analyze_Responses(peaks_wo_base, full_wo_base, var_list = input$grouping_var)
}
else{
res <- Analyze_Responses(result$peaks, full, var_list = input$grouping_var)
}
res
})
observeEvent(input$update_button, {
output$resp_count <- DT::renderDataTable({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'stats_desc_final'"))[1] == 0) {}
else{
result$resp_desc <- res()[[1]]
DT::datatable({result$resp_desc},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
pageLength = 100,
c("copy", "csv")),
class = "display"
)
}
})
output$overall_q <- DT::renderDataTable({
result$general_model <- res()[[2]][[1]]
DT::datatable({result$general_model},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
c("copy", "csv")),
class = "display"
)
}
)
output$post_hoc_mcnemar <- DT::renderDataTable({
result$pw_mcnemar <- res()[[2]][[2]]
DT::datatable({res()[[2]][[2]]},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
c("copy", "csv")),
class = "display"
)
})
### Computing dual proportions (proportion of cells responding to one stimulus that also responds to another stimulus)
output$stim_list_1 <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'peak_res'"))[1] == 0) {}
else{
stim_list <- unique(result$peaks[["spike_stimulus"]])
shiny::selectInput(inputId = "stim_list_1", "Stimulus 1", stim_list)
}
})
output$stim_list_2 <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'peak_res'"))[1] == 0) {}
else{
stim_list <- unique(result$peaks[["spike_stimulus"]])
shiny::selectInput(inputId = "stim_list_2", "Stimulus 2", stim_list)
}
})
t <- shiny::eventReactive(input$dual_button, {
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'peak_res'"))[1] == 0) {}
else{
g <- result$peaks
if(input$base_resp_dual == TRUE){
g <- calipR::base_resp.rm(result$peaks, result$full)[[1]]
}
t <- dual_prop(g, input$stim_list_1, input$stim_list_2)
}
})
output$dual_prop <- DT::renderDataTable(
DT::datatable({t()},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
c("copy", "csv")),
class = "display"
))
})
### Ajouter des visualisations des pourcentages par groupe, par coverslip etc. :
output$var_selector <- shiny::renderUI({
list(
shiny::selectInput(inputId = "x_var", label = NULL, names(result$resp_desc)),
shiny::selectInput(inputId = "y_var", label = NULL, names(result$resp_desc)),
shiny::selectInput(inputId = "z_var", label = NULL, names(result$resp_desc))
)
})
output$viz <- plotly::renderPlotly({
plotly::plot_ly(
type = 'bar',
x = result$resp_desc[[input$x_var]],
y = result$resp_desc[[input$y_var]],
text = paste("Group: ", result$resp_desc[["group"]],
"<br>Stimulus:  ", res()[[1]][["stimulus"]],
"<br>Responders: ", res()[[1]][["Responses"]],
"<br>Proportion: ", res()[[1]][["Prop"]],
"<br> Total cells: ", res()[[1]][["n_cells_grp"]]),
hoverinfo = 'text',
marker = list(size = 2),
color = res()[[1]][[input$z_var]],
)  %>%
plotly::layout(barmode ="group", yaxis = list(automargin = TRUE),
xaxis = list(automargin = TRUE), bargap = -2, bargroupgap = 0)
})
output$resp_viz <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
}
else{
responders <- unique(result$peaks[["Cell_id"]])
shiny::selectInput(inputId = "resp_viz", "Responders", responders)
}
})
output$non_resp_viz <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
}
else{
cells <- unique(result$full[["Cell_id"]])
responders <- unique(result$peaks[["Cell_id"]])
non_responders <- cells %in% responders
non_responders <- unlist(purrr::map2(cells, non_responders, function(x,y) if(y == FALSE){x}))
shiny::selectInput(inputId = "non_resp_viz", "Non Responders", non_responders)
}
})
shiny::observeEvent(input$plot_button,{
cnames <- colnames(result$full)
back_estim_opt <- c("gam_fit", "background")
cnames_check <- back_estim_opt %in% cnames
back_var <- back_estim_opt[[which(cnames_check == TRUE)]]
output$plot_resp_viz <- renderPlot({
# OpÃ©rer un tri sur les cellules regarder comment j'ai fais pour responders
p <- cell_plot(result$full, result$peaks, var = "Mean_Grey", cell = input$resp_viz, line = back_var, show_peak = input$show_peaks_box)
p
})
})
shiny::observeEvent(input$plot_button_bis,{
cnames <- colnames(result$full)
back_estim_opt <- c("gam_fit", "background")
cnames_check <- back_estim_opt %in% cnames
back_var <- back_estim_opt[[which(cnames_check == TRUE)]]
output$plot_resp_viz <- renderPlot({
p <- cell_plot(result$full, result$peaks, var = "Mean_Grey", cell = input$non_resp_viz, line = back_var, show_peak = input$show_peaks_box)
p
})
})
output$clustering_var <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
print( "dim == 0")
}
else{
list_var <- names(result$full)
shiny::selectInput(inputId = "clustvar", "Variable used for clustering", list_var)
}
})
shiny::observeEvent(input$set_seed, {
if(input$set_seed){
output$seed_field <- shiny::renderUI({
shiny::textInput("seed", "Enter Seed Value")
})
}
else{
output$seed_field <- NULL
}
})
shiny::observeEvent(input$clustplot_button, {
responding_cells <- unique(result$peaks[["Cell_id"]])
dt <- result$full[Cell_id %in% responding_cells]
final <- prepareClustData(dt, input$clustvar, norm = input$normclust)
if(input$set_seed){
set.seed(as.integer(input$seed))
}
clust_res <- dtwclust::tsclust(final, type = "partitional", k = as.integer(input$nclust), distance = input$dist_type,
centroid = "dba")
output$clustplot <- shiny::renderPlot({
p <- plot(clust_res, type="sc")
p
})
})
}
shiny::shinyApp(ui, server)
}
guigui()
x <- seq(1,50)
y <- rep(c("A1aaa","A1aab"), each = 25)
x
y
paste(x,y)
paste(y,x)
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
df <- RSQLite::dbGetQuery(
con, paste("SELECT * FROM tab_name WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
get_sub_df_long <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
sub_df <- purrr::map(cells, function(x) RSQLite::dbGetQuery(con, paste(paste("SELECT * FROM", tab_name, "WHERE Cell_id LIKE", sep = " "),
paste("'%", x, "%'", sep = ""), sep = " ")))
RSQLite::dbDisconnect(con)
df <- do.call(rbind, sub_df)
return(df)
}
get_sub_df_long("test_volume", "df_full", 50)
get_sub_df_long("test_volume", "df", 50)
getwd()
get_sub_df_long("test_volume.sqlite", "df_full", 50)
start <- Sys.time()
get_sub_df_long("test_volume.sqlite", "df_full", 50)
end <- Sys.time()
end-start
start2 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print("before new")
df <- RSQLite::dbGetQuery(
con, paste("SELECT * FROM tab_name WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start2 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print("before new")
df <- RSQLite::dbGetQuery(
con, paste(paste("SELECT * FROM", tab_name,sep = " "), "WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start2 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end2 <- Sys.time()
end-start
end2-start2
paste(x,x)
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
cells <- paste(cell_id,seq)
#cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print("before new")
df <- RSQLite::dbGetQuery(
con, paste(paste("SELECT * FROM", tab_name,sep = " "), "WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start3 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end3 <- Sys.time()
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
cells <- paste(cell_id,seq)
print(cells)
#cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print("before new")
df <- RSQLite::dbGetQuery(
con, paste(paste("SELECT * FROM", tab_name,sep = " "), "WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start3 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end3 <- Sys.time()
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
#cells <- paste(cell_id,seq)
# print(cells)
cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print(cells)
print("before new")
df <- RSQLite::dbGetQuery(
con, paste(paste("SELECT * FROM", tab_name,sep = " "), "WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start3 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end3 <- Sys.time()
paste(x[y])
x
y
x1 <- x[[1]]
y1 <- y[[1]]
paste(x1[y1])
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cell_id <- sample(cell_id$Cell_id, n_cells)
print(cell_id)
cells <- paste(cell_id,seq)
# print(cells)
#cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print(cells)
print("before new")
df <- RSQLite::dbGetQuery(
con, paste(paste("SELECT * FROM", tab_name,sep = " "), "WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start3 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end3 <- Sys.time()
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cells <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
#cell_id <- sample(cell_id$Cell_id, n_cells)
#print(cell_id)
#cells <- paste(cell_id,seq)
# print(cells)
#cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print(cells)
print("before new")
df <- RSQLite::dbGetQuery(
con, paste(paste("SELECT * FROM", tab_name,sep = " "), "WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start3 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
get_sub_df_fast <- function(db_name, tab_name, n_cells) {
seq <- seq_along(as.integer(n_cells))
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_name)
cell_id <- unique(RSQLite::dbGetQuery(con, paste("SELECT Cell_id FROM", tab_name, sep = " " )))
cells <- sample(cell_id$Cell_id, n_cells)
#print(cell_id)
#cells <- paste(cell_id,seq)
# print(cells)
#cells <- purrr::map2(cell_id, seq, function(x, y) paste(x[y]))
print(cells)
print("before new")
df <- RSQLite::dbGetQuery(
con, paste(paste("SELECT * FROM", tab_name,sep = " "), "WHERE Cell_id IN (",
paste(rep("?", length(cells)), collapse = ","), ")"),
params = as.list(cells))
return(df)
}
start3 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end3 <- Sys.time()
end3-start3
end2-start2
start2 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end2 <- Sys.time()
start3 <- Sys.time()
get_sub_df_fast("test_volume.sqlite", "df_full", 50)
end3 <- Sys.time()
end2-start2
end3-start3
con <- RSQLite::dbConnect(RSQLite::SQLite(), test_volume)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "test_volume")
con
RSQLite::dbDisconnect(con)
RSQLite::dbDisconnect(con)
RSQLite::dbDisconnect(con)
