# An eg
plot.fourier(function(t,w) {sin(w*t)}, 1, ts=seq(0,1,1/100))
acq.freq <- 100                    # data acquisition frequency (Hz)
time     <- 6                      # measuring time interval (seconds)
ts       <- seq(0,time,1/acq.freq) # vector of sampling time-points (s)
f.0      <- 1/time                 # fundamental frequency (Hz)
dc.component       <- 0
component.freqs    <- c(3,10)      # frequency of signal components (Hz)
component.delay    <- c(0,0)       # delay of signal components (radians)
component.strength <- c(.5,.25)    # strength of signal components
f <- function(t,w) {
dc.component +
sum( component.strength * sin(component.freqs*w*t + component.delay))
}
plot.fourier(f,f.0,ts)
convert.fft <- function(cs, sample.rate=1) {
cs <- cs / length(cs) # normalize
distance.center <- function(c)signif( Mod(c),        4)
angle           <- function(c)signif( 180*Arg(c)/pi, 3)
df <- data.frame(cycle    = 0:(length(cs)-1),
freq     = 0:(length(cs)-1) * sample.rate / length(cs),
strength = sapply(cs, distance.center),
delay    = sapply(cs, angle))
df
}
convert.fft(fft(1:4))
convert.fft(fft(1:5))
# returns the x.n time series for a given time sequence (ts) and
# a vector with the amount of frequencies k in the signal (X.k)
get.trajectory <- function(X.k,ts,acq.freq) {
N   <- length(ts)
i   <- complex(real = 0, imaginary = 1)
x.n <- rep(0,N)           # create vector to keep the trajectory
ks  <- 0:(length(X.k)-1)
for(n in 0:(N-1)) {       # compute each time point x_n based on freqs X.k
x.n[n+1] <- sum(X.k * exp(i*2*pi*ks*n/N)) / N
}
x.n * acq.freq
}
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
# Plot the i-th harmonic
# Xk: the frequencies computed by the FFt
#  i: which harmonic
# ts: the sampling time points
# acq.freq: the acquisition rate
plot.harmonic <- function(Xk, i, ts, acq.freq, color="red") {
Xk.h <- rep(0,length(Xk))
Xk.h[i+1] <- Xk[i+1] # i-th harmonic
harmonic.trajectory <- get.trajectory(Xk.h, ts, acq.freq=acq.freq)
points(ts, harmonic.trajectory, type="l", col=color)
}
X.k <- fft(c(4,0,0,0))                   # get amount of each frequency k
time     <- 4                            # measuring time interval (seconds)
acq.freq <- 100                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
x.n <- get.trajectory(X.k,ts,acq.freq)   # create time wave
plot(ts,x.n,type="l",ylim=c(-2,4),lwd=2)
abline(v=0:time,h=-2:4,lty=3); abline(h=0)
plot.harmonic(X.k,1,ts,acq.freq,"red")
plot.harmonic(X.k,2,ts,acq.freq,"green")
plot.harmonic(X.k,3,ts,acq.freq,"blue")
acq.freq <- 100                    # data acquisition (sample) frequency (Hz)
time     <- 6                      # measuring time interval (seconds)
ts       <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
f.0 <- 1/time
dc.component <- 1
component.freqs <- c(3,7,10)        # frequency of signal components (Hz)
component.delay <- c(0,0,0)         # delay of signal components (radians)
component.strength <- c(1.5,.5,.75) # strength of signal components
f   <- function(t,w) {
dc.component +
sum( component.strength * sin(component.freqs*w*t + component.delay))
}
plot.fourier(f,f.0,ts=ts)
f.0
ts
plot(ts)
w <- 2*pi*f.0
trajectory <- sapply(ts, function(t) f(t,w))
head(trajectory,n=30)
plot(trajectory)
X.k <- fft(trajectory)                   # find all harmonics with fft()
plot.frequency.spectrum(X.k, xlimits=c(0,20))
runif(3)
d <- runif(100)
fft(d)
d_ft <- fft(d)
plot.frequency.spectrum(d_ft, xlimits=c(0,20))
p <- plot.frequency.spectrum(d_ft, xlimits=c(0,20))
p
p
p <- plot.frequency.spectrum(d_ft, xlimits=c(0,20))
str(p)
install.packages("GeneCycle")
d
f.data <- GeneCycle::periodogram(d)
f.data
plot(f.data$freq[harmonics]*length(trajectory),
f.data$spec[harmonics]/sum(f.data$spec),
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(f.data$freq[harmonics]*length(trajectory),
f.data$spec[harmonics]/sum(f.data$spec),
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
harmonics <- 1:(acq.freq/2)
plot(f.data$freq[harmonics]*length(trajectory),
f.data$spec[harmonics]/sum(f.data$spec),
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(f.data$freq)
plot(f.data$spec)
plot(d)
harmonics <- 1:20
plot(f.data$freq[harmonics],
f.data$spec[harmonics]/sum(f.data$spec),
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(d, type = "l")
f.data$spec
plot(f.data$spec, type = "l")
plot(d, type = "l")
plot(f.data$freq[harmonics],
f.data$spec[harmonics]/sum(f.data$spec),
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(f.data$spec, type = "l")
harmonics <- 1:50
plot(f.data$freq[harmonics],
f.data$spec[harmonics]/sum(f.data$spec),
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(f.data$freq[harmonics],
f.data$spec[harmonics],
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(f.data$spec, type = "l")
plot(f.data$freq[harmonics],
f.data$spec[harmonics],
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
d <- runif(100)
e <- runif(100)
plot(d, type = "l")
plot(e, type = "l")
f.data1 <- GeneCycle::periodogram(d)
f.data2 <- GeneCycle::periodogram(e)
f.data1
plot(f.data1$freq[harmonics],
f.data1$spec[harmonics],
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(f.data2$freq[harmonics],
f.data2$spec[harmonics],
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(d, type = "l")
plot(e, type = "l")
# test avec des vraies cellules :
library(calipR)
VNO <- prepareData("inst/extdata/VNO_small", 5, 0.25, compare_groups = TRUE)
test_VNO_clean_1Hz <- clean_data(VNO, 0.1, 2, mean_width = 20, DPA_width = 10, mean_width_diff = 10)
test_VNO_clean_1Hz <- clean_data(VNO, 0.1, 2, mean_width = 20, DPA_width = 10, CN_DPA_width = 80, mean_width_diff = 10)
test_VNO_back_1Hz <- backEstimate(test_VNO_clean_1Hz, method = "gam")
simple_cell_plot(test_VNO_back_1Hz)
simple_cell_plot(test_VNO_back_1Hz, cell = "A1aaa")
simple_cell_plot(test_VNO_back_1Hz, cell = "A1aaa", var = "gam_detrended")
simple_cell_plot(test_VNO_back_1Hz, cell = "A1aaa", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaa", var = "gam_detrended", line = FALSE)
A1 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A1aaa"]$gam_detrended
A2 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2aaa"]$gam_detrended
plot(A1, type = "l")
plot(A2, type = "l")
f.data1 <- GeneCycle::periodogram(A1)
f.data2 <- GeneCycle::periodogram(A2)
plot(f.data1$freq,
f.data1$spec,
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
plot(f.data2$freq,
f.data2$spec,
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
emd(f.data1$spec, f.data2$spec)
matrix(f.data1)
matrix(f.data1$spec, f.data1$freq)
matrix(f.data1$spec)
m1 <- matrix(f.data1$spec)
m1[,2] <- matrix(f.data1$freq)
m1 <- cbind(m1, matrix(f.data1$freq))
m1
m2 <- matrix(f.data2$spec)
m2 <- cbind(m1, matrix(f.data2$freq))
emd(m1, m2)
dim(m1)
dim(m2)
m1 <- matrix(f.data1$spec)
m1 <- cbind(m1, matrix(f.data1$freq))
m2 <- matrix(f.data2$spec)
m2 <- cbind(m2, matrix(f.data2$freq))
emd(m1, m2)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aab", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aac", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aad", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aae", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaf", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aag", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aah", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aai", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaj", var = "gam_detrended", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaj", var = "Mean_Grey", line = FALSE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaj", var = "Mean_Grey", line = TRUE)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaj", var = "Mean_Grey", line = "gam")
A2 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2aag"]$gam_detrended
A2 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2aah"]$gam_detrended
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aag", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaj", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aak", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aal", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aam", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aan", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aao", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aap", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaq", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aar", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aas", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aat", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aau", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aav", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaw", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aax", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aay", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aaz", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aba", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2abb", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2abc", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2abd", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2abe", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2abf", var = "Mean_Grey", line = "gam")
A4 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2abf"]$gam_detrended
# similar ones :
A3 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2aao"]$gam_detrended
A4 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2aap"]$gam_detrended
A5 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2abc"]$gam_detrended
A6 <- test_VNO_back_1Hz[test_VNO_back_1Hz$Cell_id == "A2abf"]$gam_detrended
f.data1 <- GeneCycle::periodogram(A1)
f.data2 <- GeneCycle::periodogram(A2)
f.data3 <- GeneCycle::periodogram(A3)
f.data4 <- GeneCycle::periodogram(A4)
f.data5 <- GeneCycle::periodogram(A5)
f.data6 <- GeneCycle::periodogram(A6)
plot_freq <- function(data) {
plot(data$freq,
data$spec,
xlab="Harmonics (Hz)", ylab="Amplitute Density", type="h")
}
plot_freq(f.data1)
plot_freq(f.data2)
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aae", var = "Mean_Grey", line = "gam")
simple_cell_plot(test_VNO_back_1Hz, cell = "A2aal", var = "Mean_Grey", line = "gam")
plot_freq(f.data3)
plot_freq(f.data4)
plot_freq(f.data5)
plot_freq(f.data6)
matrix_gen <- function(f.data) {
m1 <- matrix(f.data$spec)
m1 <- cbind(m1, matrix(f.data$freq))
return(m1)
}
m1 <- matrix_gen(f.data1)
m1
m2 <- matrix_gen(f.data2)
m3 <- matrix_gen(f.data3)
m4 <- matrix_gen(f.data4)
m5 <- matrix_gen(f.data5)
m6 <- matrix_gen(f.data6)
emd(m1,m2)
emd(m1,m6)
emd(m3,m4)
DFT <- function(x){
d <- GeneCycle::periodogram(x$gam_detrended)
return(d$spec)
}
cell_split <- split(test_VNO_back_1Hz, test_VNO_back_1Hz$Cell_id)
cell_split
data <- lapply(cell_split, function(x) x[, spec := DFT(x)])
data <- lapply(cell_split, function(x)  DFT(x))
data[[1]]
data_full <- do.call(cbind, data)
data_full
DFT <- function(x){
d <- GeneCycle::periodogram(x$gam_detrended)
return(d)
}
cell_split <- split(test_VNO_back_1Hz, test_VNO_back_1Hz$Cell_id)
data <- lapply(cell_split, function(x)  DFT(x))
matrix_gen <- function(f.data) {
m1 <- matrix(f.data$spec)
m1 <- cbind(m1, matrix(f.data$freq))
return(m1)
}
data_m <- lapply(data, function(x) matrix_gen(x))
data_m
res <- lapply(seq(1,length(data_m), function(x) lapply(data_m, function(y) emd(data_m[[x]], y)   )))
res <- lapply(seq(1,length(data_m)), function(x) lapply(data_m, function(y) emd(data_m[[x]], y)   ))
res
data_r <- data_m[1:300]
length(data_r)
res <- lapply(seq(1,length(data_r)), function(x) lapply(data_r, function(y) emd(data_r[[x]], y)   ))
install.packages("FactoMineR")
library("FactoMineR")
install.packages("ggcorrplot")
library(ggcorrplot)
d <- lapply(cell_split, function(x) GeneCycle::periodogram(x$gam_detrended)$spec)
d[[1]]
d <- lapply(cell_split, function(x) t(GeneCycle::periodogram(x$gam_detrended)$spec))
d[[1]]
d <- lapply(cell_split, function(x) data.table::setDT(t(GeneCycle::periodogram(x$gam_detrended)$spec)))
data.table::setDT(d[[1]])
typeof(d[[1]])
d <- lapply(cell_split, function(x) matrix(t(GeneCycle::periodogram(x$gam_detrended)$spec))
d <- lapply(cell_split, function(x) matrix(t(GeneCycle::periodogram(x$gam_detrended)$spec)))
typeof(d[[1]])
d[[1]]
d <- lapply(cell_split, function(x) t(matrix(GeneCycle::periodogram(x$gam_detrended)$spec)))
typeof(d[[1]])
d[[1]]
d <- lapply(cell_split, function(x) data.frame((GeneCycle::periodogram(x$gam_detrended)$spec)))
typeof(d[[1]])
d[[1]]
d <- lapply(cell_split, function(x) t(data.frame((GeneCycle::periodogram(x$gam_detrended)$spec))))
typeof(d[[1]])
d[[1]]
d <- lapply(cell_split, function(x) data.frame(GeneCycle::periodogram(x$gam_detrended)$spec))
typeof(d[[1]])
d[[1]]
spread(d[[1]])
tidyr::spread(d[[1]])
d <- lapply(cell_split, function(x) data.frame(x = GeneCycle::periodogram(x$gam_detrended)$spec))
d[[1]]
tidyr::spread(d[[1]], var = x)
tidyr::spread(d[[1]])
tidyr::spread(d[[1]], seq(1,length(d[[1]]$x)), x)
tidyr::spread(d[[1]], seq(1,length(d[[1]]$x)), d[[1]]$x)
seq(1,length(d[[1]]$x))
d <- lapply(cell_split, function(x) data.table(x = GeneCycle::periodogram(x$gam_detrended)$spec))
d <- lapply(d, function(x) d[, y := seq(1,length(x))])
d <- lapply(d, function(x) data.table::setDT(d)[, y := seq(1,length(x))])
d
d[[1]]
d <- lapply(cell_split, function(x) data.table(x = GeneCycle::periodogram(x$gam_detrended)$spec))
d[[1]]
tidyr::spread(d[[1]], seq(1,length(d[[1]]$x.V1)), d[[1]]$x.V1)
d <- lapply(d, function(x) data.table::setDT(x)[, y := seq(1,length(x))])
d[[1]]
d <- lapply(d, function(x) data.table::setDT(x)[, y := seq(1,length(x[[1]]))])
d[[1]]
tidyr::spread(d[[1]], y, x.V1)
d[[1]]
tidyr::spread(data.frame(d[[1]]), y, x.V1)
d_bis <- tidyr::spread(data.frame(d[[1]]), y, x.V1)
View(d_bis)
d <- lapply(d, function(x) tidyr::spread(data.frame(x), y, x.V1))
d[[1]]
d[[2]]
d_final <- do.call(rbind, d)
d_final
data_normalized <- scale(d)
str(d_final)
unname(d_final)
d_final
corr_matrix <- cor(d_final)
ggcorrplot(corr_matrix)
data.pca <- princomp(corr_matrix)
summary(data.pca)
data.pca$loadings[, 1:2]
fviz_eig(data.pca, addlabels = TRUE)
library(FactoMineR)
fviz_eig(data.pca, addlabels = TRUE)
?fviz_eig
??fviz_eig
install.packages("corrr")
library(corrr)
install.packages("factoextra")
fviz_eig(data.pca, addlabels = TRUE)
install.packages("factoextra")
install.packages("factoextra")
install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
fviz_eig(data.pca, addlabels = TRUE)
?fviz_eig
??fviz_eig
factoextra::eigenvalue(data.pca, addlabels = TRUE)
library(devtools)
devtools::install_github("kassambara/factoextra")
library(factoextra)
library(FactoMineR)
library(ggcorrplot)
library(corrr)
library(factoextra)
library(ggplot2)
VNO <- prepareData("inst/extdata/VNO_small", 5, 0.25, compare_groups = TRUE)
# test avec des vraies cellules :
library(calipR)
VNO <- prepareData("inst/extdata/VNO_small", 5, 0.25, compare_groups = TRUE)
# test avec des vraies cellules :
library(calipR)
# test avec des vraies cellules :
library(calipR)
old.packages()
update.packages()
28*60
1680+34
library(calipR)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("ETrives/calipR", auth_token = "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")
library(calipR)
launch_GuiGui()
library(CalQuick)
library(calipR)
####Ì VNO <- prepareData("inst/extdata/VNO", 5, 0.25, compare_groups = TRUE)
getwd()
Fura <- prepareData("inst/extdata/bug_deconvolution", 5, 0.25, compare_groups = FALSE)
test_VNO_clean_1Hz <- clean_data(Fura, 0.1, 2, mean_width = 20, DPA_width = 10, CN_DPA_width = 80, mean_width_diff = 10)
test_VNO_back_1Hz <- backEstimate(test_VNO_clean_1Hz, method = "gam")
test_VNO_norm_1Hz <- norm_df(test_VNO_back_1Hz, var = "gam", width = 10)
test_deconvolve <- deconvolve(test_VNO_norm_1Hz, lambda = 1000, gam = 0.90, constraint =T, threshold = 3)
#' @param constraint
#' @param estimate_calcium
#' @param var
#' @param ESP
#' @param threshold
#'
#' @return
#' @export
#'
#' @examples
deconvolve <- function(norm_data, gam = 0.95, lambda = 1, constraint = T, estimate_calcium = T, var = "gam_detrended", ESP = 0.0001,
threshold = 3) {
cells <- unique(norm_data$Cell_id)
cell_split <- split(norm_data, norm_data$Cell_id)
print("first_split = ok")
cell_split <- lapply(cell_split, function(x) add_peak_info(x, gam = gam, lambda = lambda,constraint, estimate_calcium, var, ESP))
print("add peak info = OK ")
peaks_data <- lapply(cell_split, function(x) if(length(x$peak_frames)[[1]] != 0) {x[x$time_frame %in% x$peak_frames[[1]]]} )
print("discreted peaks ")
print("discreted peaks ")
peaks_data <- lapply(peaks_data, function(x) if(dim(x)[[1]] != 0) {x[, frame_window := x$time_frame +20]} )
print("frame window created ")
data <- do.call(rbind, cell_split)
peaks_data <- do.call(rbind, peaks_data)
print(peaks_data)
print(length(peaks_data$Cell_id))
if(length(peaks_data$Cell_id) != 0) {
peaks_data <- split(peaks_data,cumsum(1:nrow(peaks_data) %in% seq(1:nrow(peaks_data))))
print( "yo")
print( "ya")
smooth_z <- unlist(lapply(peaks_data, function(x) data[data$smooth_z == max(data[data$Cell_id == x$Cell_id & data$time_frame %between%
list(x$time_frame, x$frame_window)]$smooth_z, na.rm = TRUE)[[1]],][1,]$smooth_z))
print( "yo")
max_frame <- unlist(lapply(peaks_data, function(x) data[data$smooth_z == max(data[data$Cell_id == x$Cell_id & data$time_frame %between%
list(x$time_frame, x$frame_window)]$smooth_z, na.rm = TRUE)[[1]],][1,]$time_frame))
print( "yu")
print(length(smooth_z))
print(length(max_frame))
peaks_data <- do.call(rbind, peaks_data)
print(length(peaks_data$Cell_id))
peaks_data$max_peak_smooth_z <- smooth_z
peaks_data$Max_peak_frame <- max_frame
#print(peaks_data)
print("DONNEE")
print("subset ok" )
#print(peaks_data)
}
View(peaks_data)
print(peaks_data)
peaks_data <- split(peaks_data,cumsum(1:nrow(peaks_data) %in% seq(1:nrow(peaks_data))))
print(threshold)
lapply(peaks_data, function(x) if(is.na(x$max_peak_smooth_z[[1]])) {print(x)} else{})
print("youu")
peaks_data <- lapply(peaks_data, function(x) if(is.na(x$max_peak_smooth_z[[1]])) {} else{x})
print("youuD")
peaks_data <- do.call(rbind, peaks_data)
peaks_data <- split(peaks_data,cumsum(1:nrow(peaks_data) %in% seq(1:nrow(peaks_data))))
#lapply(peaks_data, function(x) print(x$max_peak_smooth_z[[1]] >= threshold))
peaks_data <- lapply(peaks_data, function(x) if(x$max_peak_smooth_z[[1]] >= threshold) {x} else{})
peaks_data <- do.call(rbind, peaks_data)
# print(peaks_data)
#peaks_data <- split(peaks_data,cumsum(1:nrow(peaks_data) %in% seq(1:nrow(peaks_data))))
print("split ok")
print("threshold ok" )
# peaks_data <- do.call(rbind, peaks_data)
if(is.null(peaks_data) == FALSE) {
peaks_data <- dplyr::rename(peaks_data,  "spike_stimulus" = "stimulus", "spike_frame" = "time_frame", "spike_stimulation" = "Stimulation",
"spike_smooth_z" = "smooth_z", "spike_first_derivative" = "first_derivative" )
peaks_data <- unique(peaks_data[,c("Cell_id", "spike_frame", "spike_stimulus", "spike_smooth_z", "Mean_Grey", "gam_detrended", "Max_peak_frame")])
}
#print(peaks_data)
print("peaks_data")
print(data)
print(peaks_data)
print("hou")
return(list(peaks_data, data))
}
test_deconvolve <- deconvolve(test_VNO_norm_1Hz, lambda = 1000, gam = 0.90, constraint =T, threshold = 3)
test_VNO_best_1Hz <- keep_best_peaks(test_deconvolve)
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 150)
library(calipR)
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 150)
library(calipR)
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 150)
