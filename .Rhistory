}
df <- do.call(rbind, df_list)
df$marker_positive <- as.factor(df$marker_positive)
df$group <- as.factor(df$group)
df$stimulus <- as.factor(df$stimulus)
df$coverslip <- as.factor(df$coverslip)
return(df)
}
tidy_df <- function(data, stimuli, each, pattern, duration_in_seconds,
frame_rate, coverslip_id, id, multiple = FALSE, compare_groups = FALSE, groups, marker, marker_thresh) {
df_stim <- stim_var(data, stimuli, each, frame_rate, coverslip_id)
df_final <- cell_sort(df_stim, pattern, duration_in_seconds, frame_rate, id = id,
multiple = multiple, compare_groups, groups, marker, marker_thresh)
return(df_final)
}
stim_var <- function(data, stimuli, each, frame_rate, coverslip_id){
frame_list <- list()
time <- purrr::map(each, function(x) as.numeric(x))
# Converting minutes to frames
frame_list <- lapply(time, min_to_f, frame_rate)
frame_list <- append(frame_list, dim(data)[1])
rep_each <- list()
count <- 0
for(i in frame_list){
x <- i - count
count <- count + x
rep_each <- append(rep_each, x)
}
rep_each <- rep_each[-1]
stimuli_full <- data.table("stimuli" = stimuli,"n" = rep_each)[,new := list(rep(stimuli,n))]$new[[1]]
data$stimulus <- stimuli_full
data$coverslip <- rep(coverslip_id, dim(data)[1])
return(data)
}
#' @examples
cell_sort <- function(df,pat,  duration_in_seconds, frame_rate, id,
multiple = TRUE, compare_groups = TRUE, groups, marker, marker_thresh){
stimuli_full <- df$stimulus
coverslip_full <- df$coverslip
df <- dplyr::select(df, dplyr::matches(pat))
dim <- dim(df)
data_fus <- tidyr::gather(df,
key = "Cell_id",
value = "Mean_Grey", 1:dim[2])
data_fus <- data_fus[,c("Cell_id", "Mean_Grey")]
data_fus$Mean_Grey <- unlist(lapply(data_fus$Mean_Grey, function(x) if(is.character(x)) {str_replace_all( x, ",",".")} else{x}))
data_fus$Mean_Grey <- unlist(lapply(data_fus$Mean_Grey, function(x) if(is.character(x)) {as.numeric(x)} else {x}))
### Adding the marker column
if(is.null(marker)){}
else{
long_marker <- tidyr::gather(marker,
key = "Cell_id",
value = "Mean_Grey", 1:dim[2])
data_fus$marker <- rep(long_marker$Mean_Grey, each = dim[1])
data_fus$marker_positive <-  data_fus$marker > marker_thresh
}
#Creating the variable stimulus and adding it to the data
stimuli_final <- unlist(rep(stimuli_full,dim[2]))
coverslip_final <- unlist(rep(coverslip_full,dim[2]))
data_fus$stimulus <- stimuli_final
data_fus$coverslip <- coverslip_final
if(compare_groups == TRUE){
data_fus$group <- rep(groups, dim(data_fus)[1])
}
data_fus$Cell_id <- rep(unlist(createId(data_fus, id)), each = dim[1])
#creating a variable with time frame
frame_vec <- rep(seq(from = 1, to = dim[1]),times = dim[2])
data_fus$time_frame <- frame_vec
# Adding a variable with the actual time in seconds
time_sec <- rep(seq(from = 1/ frame_rate, to = dim[1]/frame_rate, by = 1/frame_rate ),times = dim[2])
data_fus$time_seconds <- time_sec
duration <- duration_in_seconds * frame_rate
# Adding a variable tracking the frame with each stimulus being the zero reference :
data_fus <- data.table::setDT(data_fus)[, Time_frame_stim := seq(1:length(Mean_Grey)), by = .(Cell_id, stimulus)]
data_fus <- data_fus[, Stimulation := Time_frame_stim <= duration]
return(data_fus)
}
#'
#' @param folder_name
#' @param frame_rate
#' @param duration_in_seconds
#' @param compare_groups
#'
#' @return
#' @export
#'
#' @examples
prepareData_track <- function(folder_name, frame_rate,  duration_in_seconds = 30,
compare_groups = FALSE, marker_thresh = 0) {
# Get the file names and store the content in a list of df :
myFiles <- list.files(folder_name, pattern = "\\.csv", recursive = T, full.names = T)
len_before <- length(myFiles)
# Removing the meta_data file :
myFiles <- myFiles[!stringr::str_detect(myFiles,pattern="meta")]
len_after <- length(myFiles)
meta <- list.files(folder_name, pattern = "meta", recursive = T, full.names = T)
df_list <- vector(mode = "list", length = length(myFiles))
# Reading all the files
df_list <- lapply(myFiles, function(x) data.table::fread(x))
# Checking if marker files have been added
if(len_before - len_after > 1){
marker <- list.files(folder_name, pattern = "marker", recursive = T, full.names = T)
# Reading the files
marker_list <- lapply(marker, function(x) data.table::fread(x, skip = 1, header = FALSE))
marker_list <- lapply(marker_list, function(x) x[,2:length(x)])
marker_list <- lapply(marker_list, function(x) data.table::setnames(x, paste0(rep("Mean", length(x)), seq(1: length(x)))))
}
else{
marker_list <- NULL
}
# Get the coverslip number and add a Letter to it :
index_cov <-length(stringr::str_split(myFiles[[1]], "/")[[1]])
coverslip_id <- lapply(myFiles, function(x) as.integer(stringr::str_replace_all(stringr::str_split(x, "/")[[1]][index_cov], "[.csv.]", "")))
letter_list <- LETTERS[seq(from = 1, to = ceiling(length(myFiles)/9))]
cov_num <- rep(seq(from = 1, to = 9), times = length(letter_list))
letter_list <- rep(letter_list, each = 9)
if(length(letter_list[which(is.na(letter_list))]) != 0){
na_cov <- length(letter_list[which(is.na(letter_list))])
second_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
third_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
dbl <- paste0(second_letter_list, third_letter_list)
letter_list[which(is.na(letter_list))] <- dbl
}
coverslip_id <- paste(letter_list, cov_num, sep ="")
# Fetching the stimuli informations :
meta_df <- data.table::fread(meta)
stimuli <- unique(meta_df$stimuli)
stimuli <- paste(seq(1,length(stimuli)),stimuli, sep=".")
### Fetching group information
index_gr <-length(stringr::str_split(myFiles[[1]], "/")[[1]])-2
group_list <- lapply(myFiles, function(x) stringr::str_split(x, "/")[[1]][index_gr])
# now the time informations :
each <- meta_df$timing
each <- split(each, ceiling(seq_along(each)/length(stimuli)))
if(compare_groups == FALSE) {
for(i in 1:length(df_list)){
df_list[[i]] <- trackmateInput(df_list[[i]],stimuli, each[[i]],
frame_rate, coverslip_id = coverslip_id[[i]], id = i, group_list[[i]],
duration_in_seconds, marker_list[[i]], marker_thresh)
}
}
df <- do.call(rbind, df_list)
return(df)
}
#' @param frame_rate
#' @param coverslip_id
#' @param id
#' @param group
#' @param duration_in_seconds
#'
#' @return
#' @export
#'
#' @examples
trackmateInput <- function(file, stimuli, each, frame_rate, coverslip_id, id,
group, duration_in_seconds,marker, marker_thresh){
track <- file[-c(1,2,3),]
track_final <- data.table::setDT(track)[, .(Cell_id =TRACK_ID, Mean_Grey = as.numeric(MEAN_INTENSITY_CH1),
coverslip = coverslip_id)]
Ids <- unlist(createId(track_final, coverslip_id))
cell_split <- split(track_final, track_final$Cell_id)
cell_split <- purrr::map2(cell_split, Ids, function(x,y) x[, Cell_id := y])
#retrieving the total number of frames if the cell was detected from the beginning
#until the end
dim <- max(unlist(lapply(cell_split, function(x) length(x$Cell_id))))
cell_split <- lapply(cell_split, function(x) if(length(x$Cell_id) == dim){x})
data <- do.call(rbind, cell_split)
n_cells <- length(unique(data$Cell_id))
data$time_frame <- as.numeric(rep(seq(from = 1, to = dim),times = n_cells))
# matching stimuli :
time <- lapply(each, function(x) as.numeric(x))
# Converting minutes to frames
frame_list <- lapply(time, min_to_f, frame_rate)
frame_list <- append(frame_list, dim)
rep_each <- list()
count <- 0
for(i in frame_list){
x <- i - count
count <- count + x
rep_each <- append(rep_each, x)
}
rep_each <- rep_each[-1]
stimuli_full <- data.table("stimuli" = stimuli,"n" = rep_each)[,new := list(rep(stimuli,n))]$new[[1]]
# Adding a variable stimulus :
data$stimulus <- rep(stimuli_full, times = n_cells)
# Adding a variable to track the coverslip Id :
coverslip_full <- rep(coverslip_id, dim)
data$coverslip <- unlist(rep(coverslip_full,n_cells))
# Adding a variable with the actual time in seconds
data$time_seconds <- rep(seq(from = 1/ frame_rate, to = dim/ frame_rate, by = 1/frame_rate ), times = n_cells)
duration <- duration_in_seconds * frame_rate
# Adding a variable tracking the frame with each stimulus being the zero reference :
data <- data[, Time_frame_stim := seq(c(1:length(stimulus)))]
data <- data[, Stimulation := Time_frame_stim <= duration]
data <- data[, group := rep(group,each = .N)]
### Adding the marker column
if(is.null(marker)){
data$marker_positive <- FALSE
}
else{
long_marker <- tidyr::gather(marker,
key = "Cell_id",
value = "Mean_Grey", 1:dim[2])
data$marker <- rep(long_marker$Mean_Grey, each = dim[1])
data$marker_positive <-  data$marker > marker_thresh
}
return(data)
}
#  id coupled with a combination of 3 letters. This prevents alphanumeric reordering
#' of the cells.
#'
#' @param df
#' @param coverslip_id
#'
#' @return
#' @export
#'
#' @examples
createId <- function(df, coverslip_id){
cells <- names(table(df$Cell_id))
# initializing an empty list
id_list <- vector(mode = "list", length = length(cells))
# splitting the cells in chunks of 26 (letters of the alphabet)
# to be able to iterate over the chunks
cells <- split(cells, ceiling(seq_along(cells)/26))
# there are more than 26 chunks so resplitting the chunks
cells <- split(cells, ceiling(seq_along(cells)/26))
list_index = 1
index1 = 1
if(is.na(coverslip_id)) {
a <- LETTERS[sample.int(26,1)]
b <- LETTERS[sample.int(26,1)]
c <- LETTERS[sample.int(26,1)]
w <- paste0(paste0(a,b),c)
}
else{
w <- df$coverslip[[1]]
}
if(length(w[which(is.na(w))]) != 0){
na_cov <- length(w[which(is.na(w))])
second_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
third_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
dbl <- paste0(second_letter_list, third_letter_list)
w[which(is.na(w))] <- dbl
}
for(i in cells){
x <- letters[index1]
index1 = index1 + 1
index2 = 1
for(j in i) {
y <- letters[index2]
index2 = index2 + 1
index3 = 1
for(h in j){
z <- letters[index3]
id <- paste0(w,x,y,z)
id_list[[list_index]] <- id
list_index = list_index + 1
index3 = index3 + 1
}
}
}
return(id_list)
}
#' Converts time in minutes in frames
#'
#' @param x
#' @param frame_rate
#'
#' @return
#' @export
#'
#' @examples
min_to_f <- function(x, frame_rate){
if(is.integer(x) == FALSE) {
y <- as.integer(x)
y_min <- y*60
y_final <- y_min + ((x %% 1) * 100)
}
else{
y_final <- x*60
}
return(as.integer(y_final*frame_rate))
}
guigui()
#' @param line
#' @param show_peak
#' @param file_name
#' @param width
#' @param height
#'
#' @return
#' @export
#'
#' @examples
svg_plot <- function(full_data, peaks_data, cell, var,
line = c(FALSE, "poly", "gam"), show_peak = FALSE, file_name, width, height) {
svglite::svglite(file_name, width, height)
plot(cell_plot(full_data, peaks_data, cell, var, line, show_peak))
dev.off()
}
#' @param var
#' @param line
#' @param show_peak
#' @param width
#' @param height
#'
#' @return
#' @export
#'
#' @examples
svg_responders <- function(full_data, peaks_data, var,
line = c(FALSE, "poly", "gam"), show_peak = FALSE, width, height) {
lapply(unique(peaks_data$Cell_id), function(x) svg_plot(full_data, peaks_data, x, var,
line, show_peak, paste(x, ".svg", sep =""), width, height))
}
#' @param peaks_data
#' @param cell
#' @param var
#' @param line
#' @param show_peak
#'
#' @return
#' @export
#'
#' @examples
cell_plot <- function(full_data, peaks_data, cell, var, line = c(FALSE, "poly", "gam_fit", "background"), show_peak = FALSE) {
df <- full_data[full_data$Cell_id == cell,]
if(is.null(peaks_data) == FALSE) {
if(is.null(dim(peaks_data)) == FALSE | dim(peaks_data)[[1]] != 0){
peak_info <- peaks_data[peaks_data$Cell_id == cell, ]
}
}
else{
peak_info <- NULL
}
p <- ggplot2::ggplot(df, ggplot2::aes(x = time_frame, y = !!rlang::sym(var)))+
ggplot2::geom_line( ggplot2::aes( color =stimulus),size = 1)+
#geom_point(data = peak,size = 2)+
ggplot2::facet_wrap(~df$Cell_id) +
ggplot2::theme_classic()
q <- ggplot2::ggplot(df, ggplot2::aes(x = time_frame, y = smooth_z))+
ggplot2::geom_line( ggplot2::aes( color =stimulus),size = 1)+
#geom_point(data = peak,size = 2)+
ggplot2::facet_wrap(~df$Cell_id) +
ggplot2::theme_classic()
if(line == FALSE) {
}
if(line == "poly") {
p <- p + ggplot2::geom_line( ggplot2::aes(y = poly_fit))
}
if(line == "gam_fit") {
p <- p + ggplot2::geom_line( ggplot2::aes(y = gam_fit))
}
if(line == "background") {
p <- p + ggplot2::geom_line( ggplot2::aes(y = background))
}
if(is.null(peak_info) == FALSE) {
if(dim(peak_info)[[1]] == 0){
peak_info <- NULL
}
}
if(show_peak == TRUE & is.null(peak_info) == FALSE){
q <- q +
#sapply(seq_along(1:length(peak_info$Start_peak_frame)), function(x) ggplot2::geom_vline(ggplot2::aes(xintercept = peak_info$Start_peak_frame[[x]]), size = 1, group = x, colour = colors[[x]]))+
#sapply(seq_along(1:length(peak_info$End_peak_frame)), function(x) ggplot2::geom_vline(ggplot2::aes(xintercept = peak_info$End_peak_frame[[x]]), size = 1, group = x, colour = colors[[x]]))+
sapply(seq_along(1:length(peak_info$spike_frame)), function(x) ggplot2::geom_segment(ggplot2::aes(x = peak_info$spike_frame[[x]], y = min(df$smooth_z) - sd(df$smooth_z)/2, xend = peak_info$spike_frame[[x]], yend = min(df$smooth_z) - sd(df$smooth_z))))
p <- p +
sapply(seq_along(1:length(peak_info$spike_frame)), function(x)
ggplot2::geom_segment(ggplot2::aes(x = peak_info$spike_frame[[x]],
y = min(df[[var]]) - sd(df[[var]])/2, xend = peak_info$spike_frame[[x]],
yend = min(df[[var]]) - sd(df[[var]]))))
#sapply(seq_along(1:length(peak_info$spike_frame)), function(x)
# ggplot2::geom_segment(ggplot2::aes(x = peak_info$spike_frame[[x]],
#y = min(df[[var]]) - sd(df[[var]]),
#xend = peak_info$spike_frame[[x]], yend = min(df[[var]]) - sd(df[[var]])), size = 2))
final <- gridExtra::grid.arrange(p,q, ncol = 2)
}
if(show_peak == TRUE & is.null(peak_info)){
final <- gridExtra::grid.arrange(p,q, ncol = 2)
}
if(show_peak == FALSE){
final <- gridExtra::grid.arrange(p,q, ncol = 2)
}
return(final)
}
#'
#' @param data
#' @param cell
#' @param var
#' @param line
#'
#' @return
#' @export
#'
#' @examples
simple_cell_plot <- function(data, triangle_data, cell, var, line = c(FALSE, "poly", "gam", "quantile"), trianglePlot = FALSE) {
df <- data[data$Cell_id == cell,]
p <- ggplot2::ggplot(df, ggplot2::aes(x = time_frame, y = !!rlang::sym(var)))+
ggplot2::geom_line( ggplot2::aes( color =stimulus),size = 1)+
#geom_point(data = peak,size = 2)+
ggplot2::facet_wrap(~df$Cell_id) +
ggplot2::theme_classic()
#q <- ggplot(df, aes(x = time_frame, y = smooth_z))+
#geom_line( aes( color =stimulus),size = 1)+
#geom_point(data = peak,size = 2)+
#facet_wrap(~df$Cell_id) +
#theme_classic()
if(line == FALSE){
}
if(line == "poly") {
p <- ggplot2::ggplot(df, ggplot2::aes(x = time_seconds, y = !!rlang::sym(var)))+
ggplot2::geom_line( ggplot2::aes( color =stimulus),size = 1)+
#geom_point(data = peak,size = 2)+
ggplot2::geom_line( ggplot2::aes(y = poly_fit))+
ggplot2::facet_wrap(~Cell_id) +
ggplot2::theme_classic()
}
if(line == "gam") {
p <- ggplot2::ggplot(df, ggplot2::aes(x = time_seconds, y = !!rlang::sym(var)))+
ggplot2::geom_line( ggplot2::aes( color =stimulus),size = 1)+
#geom_point(data = peak,size = 2)+
ggplot2::geom_line( ggplot2::aes(y = gam_fit))+
ggplot2::facet_wrap(~Cell_id) +
ggplot2::theme_classic()
}
if(line == "quantile") {
p <- ggplot2::ggplot(df, ggplot2::aes(x = time_seconds, y = !!rlang::sym(var)))+
ggplot2::geom_line( ggplot2::aes( color =stimulus),size = 1)+
#geom_point(data = peak,size = 2)+
ggplot2::geom_line( ggplot2::aes(y = local_quantile))+
ggplot2::facet_wrap(~Cell_id) +
ggplot2::theme_classic()
}
if(trianglePlot == TRUE) {
triangle_data <- triangle_data[triangle_data$Cell_id == cell,]
p <- p + ggplot2::geom_point( ggplot2::aes(x = unlist(triangle_data$trianglePoints[[1]][1]), y = 0)) +
geom_point(aes(x = unlist(triangle_data$trianglePoints[[1]][2]), y = 0)) +
geom_point(aes(x = unlist(triangle_data$trianglePoints[[1]][3]), y = 0)) +
geom_point(aes(x = unlist(triangle_data$trianglePoints[[1]][4]), y = 0)) +
geom_point(aes(x = unlist(triangle_data$trianglePoints[[1]][5]), y = 0))
}
#final <- grid.arrange(p,q, ncol = 2)
return(p)
}
#' cell_plot_shiny
#'
#' @param data
#'
#' @return
#' @export
#'
#' @examples
cell_plot_shiny <- function(data) {
p <- ggplot2::ggplot(data, ggplot2::aes(x = time_seconds, y = Mean_Grey))+
ggplot2::geom_line( ggplot2::aes( color =stimulus),size = 1)+
ggplot2::facet_wrap(~Cell_id) +
ggplot2::theme_classic()
return(p)
}
#' random_plot_sim
#'
#' @param data
#'
#' @return
#' @export
#'
#' @examples
random_plot_sim <- function(data) {
'%notin%' <- Negate('%in%')
if(!is.data.table(data)) {
cell_list <- unique(data[[2]]$Cell_id)
num <- sample(cell_list,1)
data_filt <- dplyr::filter(data[[2]], Cell_id == num)
if(num %in% data[[1]]$Cell_id) {
responders_peak <- dplyr::filter(data[[1]], Cell_id %in% data_filt$Cell_id)
responders_peak$value <- 1
responders_peak$value_peak <- 1
for(i in 1:dim(responders_peak)[1]){
responders_peak$value[i] <- data[[2]]$Mean_Grey[data[[2]]$time_frame == responders_peak$Start_peak_frame[i] & data[[2]]$Cell_id ==
responders_peak$Cell_id[i] ]
responders_peak$value_peak[i] <- data[[2]]$Mean_Grey[ data[[2]]$time_frame == responders_peak$Max_peak_frame[i] & data[[2]]$Cell_id ==
responders_peak$Cell_id[i] ]
}
p <- ggplot2::ggplot(data_filt, ggplot2::aes(x = time_frame, y = Mean_Grey))+
ggplot2::geom_line(ggplot2::aes( color=stimulus))+
ggplot2::geom_point(data = responders_peak, ggplot2::aes(x=responders_peak$Max_peak_frame, y = responders_peak$value_peak))+
ggplot2::geom_vline(data = responders_peak, ggplot2::aes(xintercept = responders_peak$Start_peak_frame), linetype = "dashed", size = 1) +
ggplot2::geom_line(ggplot2::aes(x=time_frame, y = gam_fit))+
ggplot2::facet_wrap(~Cell_id, scales = "free")+
ggplot2::theme_bw()
}
else{
p <- ggplot2::ggplot(data_filt, ggplot2::aes(x = time_frame, y = Mean_Grey))+
ggplot2::geom_line(ggplot2::aes( color=stimulus))+
ggplot2::geom_line(ggplot2::aes(x=time_frame, y = gam_fit))+
ggplot2::facet_wrap(~Cell_id, scales = "free")+
ggplot2::theme_bw()
}
}
else {
p <- ggplot2::ggplot(data, ggplot2::aes(x = time_frame, y = Mean_Grey))+
ggplot2::geom_line(ggplot2::aes( color=stimulus))+
ggplot2::geom_line(ggplot2::aes(x=time_frame, y = gam_fit))+
ggplot2::facet_wrap(~Cell_id, scales = "free")+
ggplot2::theme_bw()
}
return(p)
}
guigui()
library(calipR)
guigui()
