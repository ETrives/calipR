plotly::plotlyProxyInvoke(myPlotProxy, "restyle", list(x = list(new_DF$data[['x']]), y = list(new_DF$data[['y']])))
})
pattern_list <- reactiveValues('1' =  c(1,1,1))
observeEvent(input$saveNewBank, {
final_bank <- reactiveValuesToList(pattern_list)
saveRDS(final_bank, file = paste(project$dir_path,input$bankName, sep = "/"))
})
counter <- reactiveValues(value = 0)
observeEvent(input$submitPattern, {
counter$value <- counter$value + 1
start <- as.integer(new_DF$data[['x']][length(new_DF$data[['x']]) -1])
end <-  as.integer(new_DF$data[['x']][length(new_DF$data[['x']])])
pattern <- new_DF$data[['y']][start:end]
pattern_list[[as.character(counter$value)]] <- pattern
})
observeEvent(input$start_newbank, {
for (i in seq(1,counter$value)){
pattern_list[[as.character(i)]] <- NULL
}
counter$value <- 0
})
pattern_viewer <- reactiveValues('1' = c(0,0,0))
observeEvent(input$viewPattern, {
start <- as.integer(new_DF$data[['x']][length(new_DF$data[['x']]) -1])
end <-  as.integer(new_DF$data[['x']][length(new_DF$data[['x']])])
pattern <- new_DF$data[['y']][start:end]
whole_trace <- new_DF$data[['y']]
whole_trace[c(1:start,end:length(new_DF$data[['x']]))] <- min(pattern, na.rm = TRUE)
pattern_viewer[['1']] <- whole_trace
})
observeEvent(input$printList,{
test <- reactiveValuesToList(pattern_list)
print(test)
})
output$myPlot <- plotly::renderPlotly({
plotly::plot_ly(new_DF$data, x = ~x, y = ~y, type = "scatter", mode = input$displayType) %>%
htmlwidgets::onRender(js, data = "clickposition")
})
output$pattern <- plotly::renderPlotly({
end <-  as.integer(new_DF$data[['x']][length(new_DF$data[['x']])])
pattern_len <- length(pattern_viewer[['1']])
to_add <- end - pattern_len
fluo <- pattern_viewer[['1']]
time <- seq(1,length(fluo))
df <- as.data.frame(y = fluo, x = time)
plotly::plot_ly(df, x = ~time, y = ~fluo, type = "scatter", mode = "line")
})
myPlotProxy <- plotly::plotlyProxy("myPlot", session)
observeEvent(input$cell,{
if(input$cell > length(unique(df_full()$Cell_id)) | input$cell == 0 | is.na(input$cell)){
output$warning <- shiny::renderUI({paste(paste("There are", length(unique(df_full()$Cell_id)),"cells.
Please enter a valid number"))
})
}
else{
output$warning <- NULL
new_DF$data <- data.frame(x = data.table::setDT(df_full())[Cell_id == unique(df_full()$Cell_id)[[input$cell]]]$time_frame,
y = data.table::setDT(df_full())[Cell_id == unique(df_full()$Cell_id)[[input$cell]]]$Mean_Grey )
}
})
### End of the module to create the banks
db <- shiny::reactiveValues()
db$load <- c(1,2)
db$create <- c(1,2)
shiny::observeEvent(input$load_button, {
if(project$db_file %in% list.files(project$dir_path)){
output$warning_load <- NULL
db$load <- data.table::setDT(calipR::get_full_df(paste(project$dir_path, project$db_file,sep = "/"), "df_full"))
}
else{
output$warning_load <- shiny::renderUI({"This database doesn't exist"})
}
})
#shiny::observeEvent(input$creating, {
#  db$create <- data.table::setDT(calipR::get_full_df(paste(project$dir_path, project$db_file,sep = "/"), "df_full"))
# })
shiny::observeEvent(input$cell_num, {
'isnotdt' <- Negate('is.data.table')
if(length(db$load) != 2) {
df <- db$load[Cell_id == unique(db$load[["Cell_id"]])[[input$cell_num]]]
output$plot_cell <- shiny::renderPlot({
p <- cell_plot_shiny(df)
p
})
}
if(length(db$create) != 2) {
df <- db$create[Cell_id == unique(db$create[["Cell_id"]])[[input$cell_num]]]
output$plot_cell <- shiny::renderPlot({
p <- cell_plot_shiny(df)
p
})
}
})
res_sim <- shiny::reactiveValues(res = NULL)
shiny::observeEvent(input$patMatch_opt, {
if(input$patMatch_opt == TRUE){
output$posBank_field <- shiny::renderUI({
shiny::textInput(inputId = "posBank", "Positive Bank", placeholder = "Enter the name of the bank you want to use")
})
output$negBank_field <- shiny::renderUI({
shiny::textInput(inputId = "negBank", "Negative Bank", placeholder = "Enter the name of the bank you want to use")
})
output$window_field <- shiny::renderUI({
shiny::selectInput(inputId = "windows", "Windows", seq(5,1000, by = 5),multiple=TRUE      )})
}
if(input$patMatch_opt == FALSE){
output$posBank_field <- NULL
output$negBank_field <- NULL
output$window_field <- NULL
}
})
shiny::observeEvent(input$sim, {
df_sub <- calipR::get_sub_df(paste(project$dir_path, project$db_file,sep = "/"),
"df_full", input$n_cells)
if(input$patMatch_opt == TRUE){
posBank <- readRDS(paste(project$dir_path, input$posBank, sep = "/"))
negBank <- readRDS(paste(project$dir_path, input$negBank, sep = "/"))
posBank <- Filter(Negate(is.null), posBank)
negBank <- Filter(Negate(is.null), negBank)
}
else{
posBank <- list()
negBank <- list()
}
res_sim$res <- downstream_analysis(df_sub, z_thresh = input$peak_thresh,
delta_thresh = input$peak_thresh_delta, lambda = input$lambda, gam = input$gam,
false_pos = input$false_pos, simulation = TRUE, pattern_matching = input$patMatch_opt,
posBank = posBank, negBank = negBank, windows = as.integer(input$windows))
})
if(is.null(res_sim)){
}
else{
output$responders <- shiny::renderUI({
data <- res_sim$res
responders <- unique(data[[1]]$Cell_id)
shiny::selectInput(inputId = "responders", "Responders", responders)
})
output$non_responders <- shiny::renderUI({
data <- res_sim$res
cells <- unique(data[[2]]$Cell_id)
responders <- unique(data[[1]]$Cell_id)
non_responders <- cells %in% responders
non_responders <- unlist(purrr::map2(cells, non_responders, function(x,y) if(y == FALSE){x}))
shiny::selectInput(inputId = "non_responders", "Non Responders", non_responders)
})
output$stats_opt <- DT::renderDataTable({
data <- res_sim$res
res2_1 <- data[[3]][[1]]
})
}
shiny::observeEvent(input$plot_responders, {
data <- res_sim$res
output$plot_cell_sim <- shiny::renderPlot({
cnames <- colnames(data[[2]])
back_estim_opt <- c("gam_fit", "background")
cnames_check <- back_estim_opt %in% cnames
back_var <- back_estim_opt[[which(cnames_check == TRUE)]]
p <- cell_plot(data[[2]], data[[1]], var = input$cell_plot_var,
cell = input$responders, line = back_var,
show_peak = input$show_peak)
p
})
})
shiny::observeEvent(input$plot_non_responders, {
data <- res_sim$res
output$plot_cell_sim <- shiny::renderPlot({
cnames <- colnames(data[[2]])
back_estim_opt <- c("gam_fit", "background")
cnames_check <- back_estim_opt %in% cnames
back_var <- back_estim_opt[[which(cnames_check == TRUE)]]
if(input$patMatch_opt == TRUE){
p <- cell_plot(data[[2]], data[[1]], var = input$cell_plot_var,
cell = input$non_responders, line = back_var,
show_peak = input$show_peak)
p
}
if(input$patMatch_opt == FALSE){
p <- cell_plot(data[[2]], data[[1]], var = input$cell_plot_var, cell = input$non_responders, line = back_var, show_peak = input$show_peak)
p
}
})
})
shiny::observeEvent(input$patMatch_opt_bis, {
if(input$patMatch_opt_bis == TRUE){
output$posBank_field_bis <- shiny::renderUI({
shiny::textInput(inputId = "posBank_bis", "Positive Bank", placeholder = "Enter the name of the bank you want to use")
})
output$negBank_field_bis <- shiny::renderUI({
shiny::textInput(inputId = "negBank_bis", "Negative Bank", placeholder = "Enter the name of the bank you want to use")
})
output$window_field_bis <- shiny::renderUI({
shiny::selectInput(inputId = "windows_bis", "Windows", seq(5,1000,by=5),multiple=TRUE      )})
}
if(input$patMatch_opt_bis == FALSE){
output$posBank_field_bis <- NULL
output$negBank_field_bis <- NULL
output$window_field_bis <- NULL
}
})
shiny::observeEvent(input$sim_bis, {
df_sub_bis <- get_cell(input$cell_opt, paste(project$dir_path,project$db_file,sep = "/"),
"df_full")
if(input$patMatch_opt_bis == TRUE){
posBank <- readRDS(paste(project$dir_path, input$posBank_bis, sep = "/"))
negBank <- readRDS(paste(project$dir_path, input$negBank_bis, sep = "/"))
posBank <- Filter(Negate(is.null), posBank)
negBank <- Filter(Negate(is.null), negBank)
}
else{
posBank <- list()
negBank <- list()
}
res_sim$res_bis <- downstream_analysis(df_sub_bis, z_thresh = input$peak_thresh_bis,
delta_thresh = input$peak_thresh_bis_delta, lambda = input$lambda_bis,
gam = input$gam_bis, false_pos = input$false_pos_bis,simulation = TRUE, one_cell = TRUE,
pattern_matching = input$patMatch_opt_bis,
posBank = posBank, negBank = negBank,
windows = as.integer(input$windows_bis))
})
shiny::observeEvent(input$plot_simulation_bis, {
data <- res_sim$res_bis
output$plot_cell_sim_bis <- shiny::renderPlot({
cnames <- colnames(data[[2]])
back_estim_opt <- c("gam_fit", "background")
cnames_check <- back_estim_opt %in% cnames
back_var <- back_estim_opt[[which(cnames_check == TRUE)]]
if(input$patMatch_opt_bis == TRUE){
p <- cell_plot(data[[2]], data[[1]], var = input$cell_plot_var, cell = input$cell_opt, line = back_var, show_peak = input$show_peak_bis)
p
}
if(input$patMatch_opt_bis == FALSE){
p <- cell_plot(data[[2]], data[[1]], var = input$cell_plot_var, cell = input$cell_opt, line = back_var, show_peak = input$show_peak_bis)
p
}
})
})
### Analyze the full dataset
res_full <- shiny::reactiveValues(res = NULL)
# This block makes the check box "compare groups" reactive
shiny::observe({
group_value <- input$groups
shiny::updateCheckboxInput(shiny::getDefaultReactiveDomain(), "groups", value = group_value)
})
### This block codes alows to launch the analysis when the button analyze dataset is clicked on. It runs the whole analysis, on the whole dataset
shiny::observeEvent(input$patMatch, {
if(input$patMatch == TRUE){
output$posBank_field_full <- shiny::renderUI({
shiny::textInput(inputId = "posBank_full", "Positive Bank", placeholder = "Enter the name of the bank you want to use")
})
output$negBank_field_full <- shiny::renderUI({
shiny::textInput(inputId = "negBank_full", "Negative Bank", placeholder = "Enter the name of the bank you want to use")
})
output$window_field_full <- shiny::renderUI({
shiny::selectInput(inputId = "windows_full", "Windows", seq(5,1000,by=5),multiple=TRUE      )})
}
if(input$patMatch == FALSE){
output$posBank_field_full <- NULL
output$negBank_field_full <- NULL
output$window_field_full <- NULL
}
})
res <- shiny::observeEvent(input$ana_full_button, {
df_full <- calipR::get_full_df(paste(project$dir_path,project$db_file,sep="/"),
"df_full")
if(input$patMatch == TRUE){
posBank <- readRDS(paste(project$dir_path, input$posBank_full, sep = "/"))
negBank <- readRDS(paste(project$dir_path, input$negBank_full, sep = "/"))
posBank <- Filter(Negate(is.null), posBank)
negBank <- Filter(Negate(is.null), negBank)
}
else{
posBank <- list()
negBank <- list()
}
res_full$res <- downstream_analysis(df_full, z_thresh = input$peak_thresh_full_z,
delta_thresh = input$peak_thresh_full_delta, lambda = input$lambda_full, gam = input$gam_full,
false_pos = input$false_pos_full, compare_groups = input$groups,
pattern_matching = input$patMatch, posBank = posBank, negBank = negBank,
windows = as.integer(input$windows_full))
# Extracting and saving the data table containing one row for each peak with the informations
#about the peak
res1 <- res_full$res[[1]]
calipR::saveData(res1, paste(project$dir_path,project$db_file, sep ="/"), "peak_res")
# Extracting and saving the full data table updated
res2 <- res_full$res[[2]]
res2 <- data.table::setDT(res2)[, peak_frames := NULL]
calipR::saveData(res2, paste(project$dir_path,project$db_file, sep ="/"), "df_final")
res3_1 <- data.table::setDT(res_full$res[[3]][[1]])
calipR::saveData(res3_1, paste(project$dir_path,project$db_file, sep ="/"), "stats_desc_final")
if(input$groups == TRUE){print( "it is true")}
else{
res3_3_1 <- data.table::setDT(res_full$res[[3]][[2]][[1]])
calipR::saveData(res3_3_1, paste(project$dir_path,project$db_file, sep ="/"), "overall_q")
res3_3_2 <- data.table::setDT(res_full$res[[3]][[2]][[2]])
calipR::saveData(res3_3_2, paste(project$dir_path,project$db_file, sep ="/"), "pairwise")
}
})
# retrieving full dataset and peaks dataset :
result <- reactiveValues()
res <- shiny::eventReactive(input$update_button,{
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
}
else{
path <- paste(project$dir_path,project$db_file, sep ="/")
full <- calipR::get_full_df(path, "df_final")
peaks <- calipR::get_full_df(path, "peak_res")
result$full <- full
result$peaks <- peaks
}
if(input$base_resp == TRUE){
peaks_wo_base <- data.table::setDT(calipR::base_resp.rm(result$peaks, result$full)[[1]])
full_wo_base <- data.table::setDT(calipR::base_resp.rm(peaks, full)[[2]])
res <- Analyze_Responses(peaks_wo_base, full_wo_base, var_list = input$grouping_var)
}
else{
res <- Analyze_Responses(result$peaks, full, var_list = input$grouping_var)
}
res
})
observeEvent(input$update_button, {
output$spinner <- shiny::renderUI({shinycssloaders::withSpinner(DT::dataTableOutput("resp_count"),
type = 6)})
output$resp_count <- DT::renderDataTable({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'stats_desc_final'"))[1] == 0) {}
else{
result$resp_desc <- res()[[1]]
DT::datatable({result$resp_desc},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
pageLength = 100,
c("copy", "csv")),
class = "display"
)
}
})
output$overall_q <- DT::renderDataTable({
result$general_model <- res()[[2]][[1]]
DT::datatable({result$general_model},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
c("copy", "csv")),
class = "display"
)
}
)
output$post_hoc_mcnemar <- DT::renderDataTable({
result$pw_mcnemar <- res()[[2]][[2]]
DT::datatable({res()[[2]][[2]]},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
c("copy", "csv")),
class = "display"
)
})
### Computing dual proportions (proportion of cells responding to one stimulus that also responds to another stimulus)
output$stim_list_1 <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'peak_res'"))[1] == 0) {}
else{
stim_list <- unique(result$peaks[["spike_stimulus"]])
shiny::selectInput(inputId = "stim_list_1", "Stimulus 1", stim_list)
}
})
output$stim_list_2 <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'peak_res'"))[1] == 0) {}
else{
stim_list <- unique(result$peaks[["spike_stimulus"]])
shiny::selectInput(inputId = "stim_list_2", "Stimulus 2", stim_list)
}
})
t <- shiny::eventReactive(input$dual_button, {
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'peak_res'"))[1] == 0) {}
else{
g <- result$peaks
if(input$base_resp_dual == TRUE){
g <- calipR::base_resp.rm(result$peaks, result$full)[[1]]
}
t <- dual_prop(g, input$stim_list_1, input$stim_list_2)
}
})
output$dual_prop <- DT::renderDataTable(
DT::datatable({t()},
extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
c("copy", "csv")),
class = "display"
))
})
### Ajouter des visualisations des pourcentages par groupe, par coverslip etc. :
output$var_selector <- shiny::renderUI({
list(
shiny::selectInput(inputId = "x_var", label = NULL, names(result$resp_desc)),
shiny::selectInput(inputId = "y_var", label = NULL, names(result$resp_desc)),
shiny::selectInput(inputId = "z_var", label = NULL, names(result$resp_desc))
)
})
output$viz <- plotly::renderPlotly({
plotly::plot_ly(
type = 'bar',
x = result$resp_desc[[input$x_var]],
y = result$resp_desc[[input$y_var]],
text = paste("Group: ", result$resp_desc[["group"]],
"<br>Stimulus:  ", res()[[1]][["stimulus"]],
"<br>Responders: ", res()[[1]][["Responses"]],
"<br>Proportion: ", res()[[1]][["Prop"]],
"<br> Total cells: ", res()[[1]][["n_cells_grp"]]),
hoverinfo = 'text',
marker = list(size = 2),
color = res()[[1]][[input$z_var]],
)  %>%
plotly::layout(barmode ="group", yaxis = list(automargin = TRUE),
xaxis = list(automargin = TRUE), bargap = -2, bargroupgap = 0)
})
output$resp_viz <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
}
else{
responders <- unique(result$peaks[["Cell_id"]])
shiny::selectInput(inputId = "resp_viz", "Responders", responders)
}
})
output$non_resp_viz <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
}
else{
cells <- unique(result$full[["Cell_id"]])
responders <- unique(result$peaks[["Cell_id"]])
non_responders <- cells %in% responders
non_responders <- unlist(purrr::map2(cells, non_responders, function(x,y) if(y == FALSE){x}))
shiny::selectInput(inputId = "non_resp_viz", "Non Responders", non_responders)
}
})
shiny::observeEvent(input$plot_button,{
output$plot_resp_viz <- renderPlot({
cnames <- colnames(result$full)
back_estim_opt <- c("gam_fit", "background")
cnames_check <- back_estim_opt %in% cnames
back_var <- back_estim_opt[[which(cnames_check == TRUE)]]
# Opérer un tri sur les cellules regarder comment j'ai fais pour responders
p <- cell_plot(result$full, result$peaks, var = "Mean_Grey", cell = input$resp_viz, line = back_var, show_peak = input$show_peaks_box)
p
})
})
shiny::observeEvent(input$plot_button_bis,{
output$plot_resp_viz <- renderPlot({
cnames <- colnames(result$full)
back_estim_opt <- c("gam_fit", "background")
cnames_check <- back_estim_opt %in% cnames
back_var <- back_estim_opt[[which(cnames_check == TRUE)]]
p <- cell_plot(result$full, result$peaks, var = "Mean_Grey", cell = input$non_resp_viz, line = back_var, show_peak = input$show_peaks_box)
p
})
})
output$clustering_var <- shiny::renderUI({
if(dim(calipR::checkTable(paste(project$dir_path,project$db_file, sep ="/"), "'df_final'"))[1] == 0) {
}
else{
list_var <- names(result$full)
shiny::selectInput(inputId = "clustvar", "Variable used for clustering", list_var)
}
})
shiny::observeEvent(input$set_seed, {
if(input$set_seed){
output$seed_field <- shiny::renderUI({
shiny::textInput("seed", "Enter Seed Value")
})
}
else{
output$seed_field <- NULL
}
})
shiny::observeEvent(input$clustplot_button, {
responding_cells <- unique(result$peaks[["Cell_id"]])
dt <- result$full[Cell_id %in% responding_cells]
final <- prepareClustData(dt, input$clustvar, norm = input$normclust)
if(input$set_seed){
set.seed(as.integer(input$seed))
}
clust_res <- dtwclust::tsclust(final, type = "partitional", k = as.integer(input$nclust), distance = input$dist_type,
centroid = "dba")
output$clustplot <- shiny::renderPlot({
p <- plot(clust_res, type="sc")
p
})
})
}
shiny::shinyApp(ui, server)
}
guigui()
