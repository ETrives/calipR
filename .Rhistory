}
}
df <- do.call(rbind, df_list)
#write.csv(df, "df_manip_maxime.csv")
return(df)
}
launch_GuiGui()
library(CalQuick)
library(CalQuick)
library(DT)
library(shiny)
library(shinydashboard)
library(shinythemes)
launch_GuiGui <- function(){
ui <-
dashboardPage(
dashboardHeader(
tags$li(class = "dropdown",
tags$style(".main-header {max-height: 180px}"),
tags$style(".main-header .logo {height: 180px}"),
tags$style(".main-header .logo {padding-top: 1%}"),
tags$style(".main-header .logo {padding-bottom: 1%}")
),
title = div(img(src = "CalQuick_bis.png", width = "70%", height = "70%", align = "center"))),
dashboardSidebar(
tags$style(".left-side, .main-sidebar {padding-top: 180px}"),
sidebarMenu(id = "sidebarid",
menuItem(
"Description", tabName = "des"),
menuItem(
"Tutorial", tabName = "tuto"),
menuItem(
"Analyze Your Data", tabName = "ana"),
menuSubItem("Prepare Data", tabName = "prep"),
menuSubItem("Visualize Raw Data", tabName = "viz"),
menuSubItem("Optimize Analysis Parameters", tabName = "opt"),
menuSubItem("Analyze data", tabName = "ana_full"),
conditionalPanel( 'input.sidebarid == "prep"',
selectInput("stim_num", label ="Stimuli number (/cell)", c("1" = "1", "2" = "2", "3" = "3",
"4" = "4", "5" = "5", "6"="6", "7"="7",
"8"="8", "9"="9","10"="10")),
textInput("folder", label = NULL, placeholder = "Write folder's name (where all the files are)"),
actionButton("launch", "Load & Tidy Data", align = "center")),
conditionalPanel( 'input.sidebarid == "viz"',
textInput("cell", label = NULL, placeholder = "Enter the name of the cell you want to plot"),
actionButton("cell_click", "Plot Cell", align = "center")
),
conditionalPanel( 'input.sidebarid == "ana_full"',
textInput("peak_thresh_full", label = NULL, placeholder = "Peak Threshold"),
textInput("rise_full", label = NULL, placeholder = "Frame before peak"),
checkboxInput("groups", label = "Compare groups"),
actionButton("ana_full_button", "Launch Full Analysis", align = "center")
)
))
,
dashboardBody(
tabItems(
tabItem("des"),
tabItem("ana"),
tabItem("tuto"),
tabItem("prep",
fluidRow(
box(title = "Dataset Prepared", width = 12, solidHeader = TRUE, status = "primary",
DT::dataTableOutput("df_sql")))),
tabItem("viz",
fluidRow(
box(title = "Plotting Cells", width = 6, solidHeader = TRUE, status = "primary",
textInput("cell", label = NULL, placeholder = "Enter the name of the cell you want to plot"),
actionButton("cell_click", "Plot Cell", align = "center"),
plotOutput(outputId = "plot_cell")))),
tabItem("opt",
box(title = "Optimize Parameters", width = 6, solidHeader = TRUE, status = "primary",
textInput("peak_thresh", label = NULL, placeholder = "Enter the peak threshold you want to try (z score)"),
textInput("rise_range", label = NULL, placeholder = "Enter the range taken to find a peak start (integer between 5 and 60)"),
textInput("n_cells", label = NULL, placeholder = "Enter the number of cells you want to run the stimulation on"),
actionButton("sim", "Simulate Analysis", align = "center"),
actionButton("plot_simulation", "Plot Random Cells", align = "center"),
plotOutput(outputId = "plot_cell_sim")),
box(title = "Try other parameters on a given cell", width = 6, solidHeader = TRUE, status = "primary",
textInput("peak_thresh_bis", label = NULL, placeholder = "Enter the peak threshold you want to try (z score)"),
textInput("rise_range_bis", label = NULL, placeholder = "Enter the range taken to find a peak start (integer between 5 and 60)"),
textInput("cell_opt", label = NULL, placeholder = "On which cell do you want to try new parameters ?"),
actionButton("sim_bis", "Simulate Analysis", align = "center"),
actionButton("plot_simulation_bis", "Plot Random Cells", align = "center"),
plotOutput(outputId = "plot_cell_sim_bis"))),
tabItem("ana_full",
fluidRow(
box(title = "Description of Responses", width = 12, solidHeader = TRUE, status = "primary",
textOutput("resp_count"),
DT::dataTableOutput("resp_group_stim"),
textOutput("n_peaks"),
DT::dataTableOutput("peaks_by_class"),
DT::dataTableOutput("overall_q"),
DT::dataTableOutput("post_hoc_mcnemar")
)),
fluidRow(
box(title = "Dual Proportions", width = 12, solidHeader = TRUE, status = "primary",
textInput("stim1", label = NULL, placeholder = "Stimulus 1"),
textInput("stim2", label = NULL, placeholder = "Stimulus 2"),
actionButton("dual_button", "Compute Dual Proportions", align = "center" ),
br(),
br(),
DT::dataTableOutput("dual_prop"),
))
)
)
))
server <- function(input, output){
sqlitePath <- getwd()
folder <- reactive({
if(is.null(input$folder)) {return()}
else{
folder <- input$folder
folder
}
})
stim_numb <- reactive({
if(is.null(input$stim_num)) {return()}
else{
stim_numb <- as.numeric(input$stim_num)
stim_numb
}
})
df_final <- eventReactive(input$launch, {
print("we are inside the reactive function")
print(stim_numb())
df <- CalQuick::prepareData(folder(), stim_numb(), 0.25, compare_groups = TRUE)
CalQuick::saveData(df, "db_cq.sqlite", "df_full")
df
})
output$df_sql <- DT::renderDataTable({
if(is.null(df_final())) {return()}
else{
df <- CalQuick::loading100("db_cq.sqlite", "df_full")
df <- datatable(df)
df
}
})
df_plot <- eventReactive(input$cell_click, {
df <- CalQuick::get_cell(input$cell, "db_cq.sqlite", "df_full")
df
})
output$plot_cell <- renderPlot({
p <- CalQuick::cell_plot_shiny(df_plot())
p
})
res_sim <- reactiveValues(res = NULL)
observeEvent(input$sim, {
print("Simulation started")
df_sub <- CalQuick::get_sub_df("db_cq.sqlite", "df_full", input$n_cells)
res_sim$res <- CalQuick::downstream_analysis(df_sub, threshold = input$peak_thresh, borders_range = input$rise_range)
})
observeEvent(input$plot_simulation, {
print("plot trigerred")
data <- res_sim$res
print(str(data))
print(data[[1]])
print(data[[2]])
output$plot_cell_sim <- renderPlot({
p <- random_plot_sim(data)
p
})
})
observeEvent(input$sim_bis, {
print("Second simulation started")
df <- res_sim$res[[2]]
print(df)
df_sub_bis <- filter(df, Cell_id == input$cell_opt)
res_sim$res_bis <- downstream_analysis_one_cell(df_sub_bis, 4,2,4,input$peak_thresh_bis, input$rise_range_bis, 5)
})
observeEvent(input$plot_simulation_bis, {
print("plot trigerred")
data <- res_sim$res_bis
print(str(data))
print(data[[1]])
print(data[[2]])
output$plot_cell_sim_bis <- renderPlot({
p <- random_plot_sim(data)
p
})
})
### Analyze the full dataset
# This block makes the check box "compare groups" reactive
observe({
group_value <- input$groups
updateCheckboxInput(getDefaultReactiveDomain(), "groups", value = group_value)
print(input$groups)
})
### This block codes alows to launch the analysis when the button analyze dataset is clicked on. It runs the whole analysis, on the whole dataset
res <- eventReactive(input$ana_full_button, {
df_full <- get_full_df("db_cq.sqlite", "df_full")
res <- downstream_analysis(df_full, 4,2,4,input$peak_thresh_full, input$rise_full,2, compare_groups = input$groups)
# Extracting and saving the data table containing one row for each peak with the informations
#about the peak
res1 <- res[[2]]
saveData(res1, "db_cq.sqlite", "peak_res")
# Extracting and saving the full data table updated
res2 <- res[[3]]
saveData(res2, "db_cq.sqlite", "df_final")
res
})
output$resp_count <- renderText({
res <- res()
res1 <- res[[1]][1][[1]]
res1
})
output$resp_group_stim <- DT::renderDataTable({
res <- res()
res2 <- res[[1]][2][[1]]
res2
})
output$n_peaks <- renderText({
res <- res()
res3 <- res[[1]][3][[1]]
res3
})
output$peaks_by_class <- DT::renderDataTable({
res <- res()
res4 <- res[[1]][4][[1]]
res4
})
output$overall_q <- DT::renderDataTable({
res <- res()
res4 <- res[[1]][5][[1]]
res4
})
output$post_hoc_mcnemar <- DT::renderDataTable({
res <- res()
res4 <- res[[1]][6][[1]]
res4
})
### Computing dual proportions (proportion of cells responding to one stimulus that also responds to another stimulus)
t <- eventReactive(input$dual_button, {
res <- get_full_df("db_cq.sqlite", "peak_res")
print(res)
t <- dual_prop(res, input$stim1, input$stim2)
print(t)
})
output$dual_prop <- DT::renderDataTable({
t()
})
}
shinyApp(ui, server)
}
launch_GuiGui()
library(CalQuick)
library(CalQuick)
library(DT)
library(shiny)
library(shinydashboard)
library(shinythemes)
launch_GuiGui <- function(){
ui <-
dashboardPage(
dashboardHeader(
tags$li(class = "dropdown",
tags$style(".main-header {max-height: 180px}"),
tags$style(".main-header .logo {height: 180px}"),
tags$style(".main-header .logo {padding-top: 1%}"),
tags$style(".main-header .logo {padding-bottom: 1%}")
),
title = div(img(src = "CalQuick_bis.png", width = "70%", height = "70%", align = "center"))),
dashboardSidebar(
tags$style(".left-side, .main-sidebar {padding-top: 180px}"),
sidebarMenu(id = "sidebarid",
menuItem(
"Description", tabName = "des"),
menuItem(
"Tutorial", tabName = "tuto"),
menuItem(
"Analyze Your Data", tabName = "ana"),
menuSubItem("Prepare Data", tabName = "prep"),
menuSubItem("Visualize Raw Data", tabName = "viz"),
menuSubItem("Optimize Analysis Parameters", tabName = "opt"),
menuSubItem("Analyze data", tabName = "ana_full"),
conditionalPanel( 'input.sidebarid == "prep"',
selectInput("stim_num", label ="Stimuli number (/cell)", c("1" = "1", "2" = "2", "3" = "3",
"4" = "4", "5" = "5", "6"="6", "7"="7",
"8"="8", "9"="9","10"="10")),
textInput("folder", label = NULL, placeholder = "Write folder's name (where all the files are)"),
actionButton("launch", "Load & Tidy Data", align = "center")),
conditionalPanel( 'input.sidebarid == "viz"',
textInput("cell", label = NULL, placeholder = "Enter the name of the cell you want to plot"),
actionButton("cell_click", "Plot Cell", align = "center")
),
conditionalPanel( 'input.sidebarid == "ana_full"',
textInput("peak_thresh_full", label = NULL, placeholder = "Peak Threshold"),
textInput("rise_full", label = NULL, placeholder = "Frame before peak"),
checkboxInput("groups", label = "Compare groups"),
actionButton("ana_full_button", "Launch Full Analysis", align = "center")
)
))
,
dashboardBody(
tabItems(
tabItem("des"),
tabItem("ana"),
tabItem("tuto"),
tabItem("prep",
fluidRow(
box(title = "Dataset Prepared", width = 12, solidHeader = TRUE, status = "primary",
DT::dataTableOutput("df_sql")))),
tabItem("viz",
fluidRow(
box(title = "Plotting Cells", width = 6, solidHeader = TRUE, status = "primary",
textInput("cell", label = NULL, placeholder = "Enter the name of the cell you want to plot"),
actionButton("cell_click", "Plot Cell", align = "center"),
plotOutput(outputId = "plot_cell")))),
tabItem("opt",
box(title = "Optimize Parameters", width = 6, solidHeader = TRUE, status = "primary",
textInput("peak_thresh", label = NULL, placeholder = "Enter the peak threshold you want to try (z score)"),
textInput("rise_range", label = NULL, placeholder = "Enter the range taken to find a peak start (integer between 5 and 60)"),
textInput("n_cells", label = NULL, placeholder = "Enter the number of cells you want to run the stimulation on"),
actionButton("sim", "Simulate Analysis", align = "center"),
actionButton("plot_simulation", "Plot Random Cells", align = "center"),
plotOutput(outputId = "plot_cell_sim")),
box(title = "Try other parameters on a given cell", width = 6, solidHeader = TRUE, status = "primary",
textInput("peak_thresh_bis", label = NULL, placeholder = "Enter the peak threshold you want to try (z score)"),
textInput("rise_range_bis", label = NULL, placeholder = "Enter the range taken to find a peak start (integer between 5 and 60)"),
textInput("cell_opt", label = NULL, placeholder = "On which cell do you want to try new parameters ?"),
actionButton("sim_bis", "Simulate Analysis", align = "center"),
actionButton("plot_simulation_bis", "Plot Random Cells", align = "center"),
plotOutput(outputId = "plot_cell_sim_bis"))),
tabItem("ana_full",
fluidRow(
box(title = "Description of Responses", width = 12, solidHeader = TRUE, status = "primary",
textOutput("resp_count"),
DT::dataTableOutput("resp_group_stim"),
textOutput("n_peaks"),
DT::dataTableOutput("peaks_by_class"),
DT::dataTableOutput("overall_q"),
DT::dataTableOutput("post_hoc_mcnemar")
)),
fluidRow(
box(title = "Dual Proportions", width = 12, solidHeader = TRUE, status = "primary",
textInput("stim1", label = NULL, placeholder = "Stimulus 1"),
textInput("stim2", label = NULL, placeholder = "Stimulus 2"),
actionButton("dual_button", "Compute Dual Proportions", align = "center" ),
br(),
br(),
DT::dataTableOutput("dual_prop"),
))
)
)
))
server <- function(input, output){
sqlitePath <- getwd()
folder <- reactive({
if(is.null(input$folder)) {return()}
else{
folder <- input$folder
folder
}
})
stim_numb <- reactive({
if(is.null(input$stim_num)) {return()}
else{
stim_numb <- as.numeric(input$stim_num)
stim_numb
}
})
df_final <- eventReactive(input$launch, {
print("we are inside the reactive function")
print(stim_numb())
df <- CalQuick::prepareData(folder(), stim_numb(), 0.25, compare_groups = TRUE)
CalQuick::saveData(df, "db_cq.sqlite", "df_full")
df
})
output$df_sql <- DT::renderDataTable({
if(is.null(df_final())) {return()}
else{
df <- CalQuick::loading100("db_cq.sqlite", "df_full")
df <- datatable(df)
df
}
})
df_plot <- eventReactive(input$cell_click, {
df <- CalQuick::get_cell(input$cell, "db_cq.sqlite", "df_full")
df
})
output$plot_cell <- renderPlot({
p <- CalQuick::cell_plot_shiny(df_plot())
p
})
res_sim <- reactiveValues(res = NULL)
observeEvent(input$sim, {
print("Simulation started")
df_sub <- CalQuick::get_sub_df("db_cq.sqlite", "df_full", input$n_cells)
res_sim$res <- CalQuick::downstream_analysis(df_sub, threshold = input$peak_thresh, borders_range = input$rise_range)
})
observeEvent(input$plot_simulation, {
print("plot trigerred")
data <- res_sim$res
print(str(data))
print(data[[1]])
print(data[[2]])
output$plot_cell_sim <- renderPlot({
p <- random_plot_sim(data)
p
})
})
observeEvent(input$sim_bis, {
print("Second simulation started")
df <- res_sim$res[[2]]
print(df)
df_sub_bis <- filter(df, Cell_id == input$cell_opt)
res_sim$res_bis <- downstream_analysis_one_cell(df_sub_bis, 4,2,4,input$peak_thresh_bis, input$rise_range_bis, 5)
})
observeEvent(input$plot_simulation_bis, {
print("plot trigerred")
data <- res_sim$res_bis
print(str(data))
print(data[[1]])
print(data[[2]])
output$plot_cell_sim_bis <- renderPlot({
p <- random_plot_sim(data)
p
})
})
### Analyze the full dataset
# This block makes the check box "compare groups" reactive
observe({
group_value <- input$groups
updateCheckboxInput(getDefaultReactiveDomain(), "groups", value = group_value)
print(input$groups)
})
### This block codes alows to launch the analysis when the button analyze dataset is clicked on. It runs the whole analysis, on the whole dataset
res <- eventReactive(input$ana_full_button, {
df_full <- get_full_df("db_cq.sqlite", "df_full")
res <- downstream_analysis(df_full, 4,2,4,input$peak_thresh_full, input$rise_full,2, compare_groups = input$groups)
# Extracting and saving the data table containing one row for each peak with the informations
#about the peak
res1 <- res[[2]]
saveData(res1, "db_cq.sqlite", "peak_res")
# Extracting and saving the full data table updated
res2 <- res[[3]]
saveData(res2, "db_cq.sqlite", "df_final")
res
})
output$resp_count <- renderText({
res <- res()
res1 <- res[[1]][1][[1]]
res1
})
output$resp_group_stim <- DT::renderDataTable({
res <- res()
res2 <- res[[1]][2][[1]]
res2
})
output$n_peaks <- renderText({
res <- res()
res3 <- res[[1]][3][[1]]
res3
})
output$peaks_by_class <- DT::renderDataTable({
res <- res()
res4 <- res[[1]][4][[1]]
res4
})
output$overall_q <- DT::renderDataTable({
res <- res()
res4 <- res[[1]][5][[1]]
res4
})
output$post_hoc_mcnemar <- DT::renderDataTable({
res <- res()
res4 <- res[[1]][6][[1]]
res4
})
### Computing dual proportions (proportion of cells responding to one stimulus that also responds to another stimulus)
t <- eventReactive(input$dual_button, {
res <- get_full_df("db_cq.sqlite", "peak_res")
print(res)
t <- dual_prop(res, input$stim1, input$stim2)
print(t)
})
output$dual_prop <- DT::renderDataTable({
t()
})
}
shinyApp(ui, server)
}
launch_GuiGui()
test_1Hz_bis <- prepareData("test1_2", 2, 1, compare_groups = FALSE)
test_clean_1Hz <- clean_data(test_1Hz_bis, 0.1, 2, mean_width = 20, DPA_width = 10, mean_width_diff = 10)
test_back_1Hz <- backEstimate(test_clean_1Hz, method = "gam")
test_norm_1Hz <- norm_df(test_back_1Hz, var = "gam", width = 10)
test_deconvolve <- deconvolve(test_norm_1Hz, lambda = 200, gam = 0.97, constraint =T, threshold = 2, var = "gam_detrended")
test_best_1Hz <- keep_best_peaks(test_deconvolve)
test_borders_1Hz <- find_borders(test_best_1Hz, 50)
test_classify_1Hz <- classify_peaks(test_borders_1Hz, time_thresh = 1, frame_rate = 0.25)
test_resp_1 <- Analyze_Responses(test_classify_1Hz, test_clean_1Hz, compare_groups = FALSE)
test_resp_1 <- Analyze_Responses(test_borders[[1]], test_clean_1Hz, compare_groups = FALSE)
test_resp_1 <- Analyze_Responses(test_borders_1Hz[[1]], test_clean_1Hz, compare_groups = FALSE)
test_resp_1
test_deconvolve <- deconvolve(test_norm_1Hz, lambda = 10, gam = 0.97, constraint =T, threshold = 2, var = "gam_detrended")
test_best_1Hz <- keep_best_peaks(test_deconvolve)
test_borders_1Hz <- find_borders(test_best_1Hz, 50)
test_resp_1 <- Analyze_Responses(test_borders_1Hz[[1]], test_clean_1Hz, compare_groups = FALSE)
test_resp_1
simple_cell_plot(test_deconvolve[[2]], var = "gam_detrended", cell = "aaae", line = FALSE) +
ggplot2::geom_line(ggplot2::aes(x = time_frame, y = deconvolved_trace
))
test_deconvolve <- deconvolve(test_norm_1Hz, lambda = 100, gam = 0.97, constraint =T, threshold = 2, var = "gam_detrended")
test_best_1Hz <- keep_best_peaks(test_deconvolve)
test_borders_1Hz <- find_borders(test_best_1Hz, 50)
test_resp_1 <- Analyze_Responses(test_borders_1Hz[[1]], test_clean_1Hz, compare_groups = FALSE)
test_resp_1
simple_cell_plot(test_deconvolve[[2]], var = "gam_detrended", cell = "aaae", line = FALSE) +
ggplot2::geom_line(ggplot2::aes(x = time_frame, y = deconvolved_trace
))
library(CalQuick)
