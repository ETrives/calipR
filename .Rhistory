#'
#' @examples
find_start <- function(peaks, full_data, range){
print("inside find_start")
df_list_start <- lapply(peaks, subset_window, dt_2 = full_data, period = "start")
#df_list_start <- lapply(peaks, function(x) full_data[full_data$Cell_id == x$Cell_id])
df_list_start <- lapply(df_list_start, function(x) x[order(-x$time_frame),])
XmYm_start <- lapply(df_list_start, function(x) x[x$first_derivative == max(x$first_derivative, na.rm = TRUE)[1],])
XrYr_start <- lapply(df_list_start, function(x) x[x$time_frame == min(x$time_frame)[1],])
lapply(df_list_start, function(x) if(x$Cell_id == "cahr") {print(x)})
start_area_list <- purrr::pmap(list(df_list_start, XmYm_start, XrYr_start),
function(x,y,z) unlist(lapply(x$time_frame, function(a)
0.5*((y$DPA - x[x$time_frame == a,]$DPA)* (2*y$time_frame  - (max(x$time_frame) - x[x$time_frame == a,]$time_frame)
- z$time_frame)))))
df_list_start <- purrr::map2(start_area_list, df_list_start, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_start)
}
#' from the previous step
#'
#'
#' @param data
#' @param range
#'
#' @return
#' @export
#'
#' @examples
find_borders <- function(data, range){
dt_1 <- data[[1]]
dt_2 <- data[[2]]
True_peaks <- dt_1[dt_1$True_peak == TRUE]
# Defining the range in which to find before and after the peak to find the
# start/end
True_peaks$start_window <- unlist(lapply(True_peaks$Max_peak_frame, function(x) x - as.integer(range)))
True_peaks$end_window <- unlist(lapply(True_peaks$Max_peak_frame, function(x) x + as.integer(range)))
# Splitting the first data table into a list of data table with each element
# containing the informations regarding one peak
find_1 <- split(True_peaks,cumsum(1:nrow(True_peaks) %in% seq(1:nrow(True_peaks))))
start_area_list <- find_start(find_1, dt_2, range)
peak_start <- do.call(rbind, start_area_list)
peak_start$Cell_id == start_area_list$Cell_id
end_area_list <- find_end(find_1, dt_2, range)
peak_end <- do.call(rbind, end_area_list)
True_peaks$Start_peak_frame <- peak_start$time_frame
True_peaks$Start_peak_derivative <- peak_start$smooth_Diff
True_peaks$Start_peak_stimulus <- peak_start$stimulus
True_peaks$Start_peak_rel_frame <- peak_start$Time_frame_stim
True_peaks$Start_peak_stimulation <- peak_start$Stimulation
True_peaks$End_peak_frame <- peak_end$time_frame
True_peaks$End_peak_derivative <- peak_end$smooth_Diff
True_peaks$End_peak_frame <- peak_end$time_frame
True_peaks$End_peak_rel_frame <- peak_end$Time_frame_stim
True_peaks$group <- peak_start$group
return(list(True_peaks, peak_start, peak_end))
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 100)
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the start of one peak
#' @export
#'
#' @examples
find_start <- function(peaks, full_data, range){
print("inside find_start")
df_list_start <- lapply(peaks, subset_window, dt_2 = full_data, period = "start")
#df_list_start <- lapply(peaks, function(x) full_data[full_data$Cell_id == x$Cell_id])
df_list_start <- lapply(df_list_start, function(x) x[order(-x$time_frame),])
XmYm_start <- lapply(df_list_start, function(x) x[x$first_derivative == max(x$first_derivative, na.rm = TRUE)[1],])
XrYr_start <- lapply(df_list_start, function(x) x[x$time_frame == min(x$time_frame)[1],])
lapply(df_list_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
start_area_list <- purrr::pmap(list(df_list_start, XmYm_start, XrYr_start),
function(x,y,z) unlist(lapply(x$time_frame, function(a)
0.5*((y$DPA - x[x$time_frame == a,]$DPA)* (2*y$time_frame  - (max(x$time_frame) - x[x$time_frame == a,]$time_frame)
- z$time_frame)))))
df_list_start <- purrr::map2(start_area_list, df_list_start, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_start)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 100)
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the start of one peak
#' @export
#'
#' @examples
find_start <- function(peaks, full_data, range){
print("inside find_start")
df_list_start <- lapply(peaks, subset_window, dt_2 = full_data, period = "start")
#df_list_start <- lapply(peaks, function(x) full_data[full_data$Cell_id == x$Cell_id])
df_list_start <- lapply(df_list_start, function(x) x[order(-x$time_frame),])
XmYm_start <- lapply(df_list_start, function(x) x[x$first_derivative == max(x$first_derivative, na.rm = TRUE)[1],])
XrYr_start <- lapply(df_list_start, function(x) x[x$time_frame == min(x$time_frame)[1],])
lapply(XmYm_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
lapply(XrYr_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
start_area_list <- purrr::pmap(list(df_list_start, XmYm_start, XrYr_start),
function(x,y,z) unlist(lapply(x$time_frame, function(a)
0.5*((y$DPA - x[x$time_frame == a,]$DPA)* (2*y$time_frame  - (max(x$time_frame) - x[x$time_frame == a,]$time_frame)
- z$time_frame)))))
df_list_start <- purrr::map2(start_area_list, df_list_start, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_start)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 100)
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "Mean_Grey", line = FALSE
)
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "Mean_Grey", line = FALSE) + geom_point(aes(x=9, y = 34309.31))
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "Mean_Grey", line = FALSE) + ggplot::geom_point(aes(x=9, y = 34309.31))
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "Mean_Grey", line = FALSE) + ggplot2::geom_point(aes(x=9, y = 34309.31))
library(ggplot2)
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "Mean_Grey", line = FALSE) + ggplot2::geom_point(aes(x=9, y = 34309.31))
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "first_derivative", line = FALSE) + ggplot2::geom_point(aes(x=9, y = 34309.31))
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "first_derivative", line = FALSE) + ggplot2::geom_point(aes(x=9, y = 0))
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the start of one peak
#' @export
#'
#' @examples
find_start <- function(peaks, full_data, range){
print("inside find_start")
df_list_start <- lapply(peaks, subset_window, dt_2 = full_data, period = "start")
#df_list_start <- lapply(peaks, function(x) full_data[full_data$Cell_id == x$Cell_id])
df_list_start <- lapply(df_list_start, function(x) x[order(-x$time_frame),])
XmYm_start <- lapply(df_list_start[1:10,], function(x) x[x$first_derivative == max(x$first_derivative, na.rm = TRUE)[1],])
XrYr_start <- lapply(df_list_start, function(x) x[x$time_frame == min(x$time_frame)[1],])
lapply(XmYm_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
lapply(XrYr_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
start_area_list <- purrr::pmap(list(df_list_start, XmYm_start, XrYr_start),
function(x,y,z) unlist(lapply(x$time_frame, function(a)
0.5*((y$DPA - x[x$time_frame == a,]$DPA)* (2*y$time_frame  - (max(x$time_frame) - x[x$time_frame == a,]$time_frame)
- z$time_frame)))))
df_list_start <- purrr::map2(start_area_list, df_list_start, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_start)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 100)
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the start of one peak
#' @export
#'
#' @examples
find_start <- function(peaks, full_data, range){
print("inside find_start")
df_list_start <- lapply(peaks, subset_window, dt_2 = full_data, period = "start")
#df_list_start <- lapply(peaks, function(x) full_data[full_data$Cell_id == x$Cell_id])
df_list_start <- lapply(df_list_start, function(x) x[order(-x$time_frame),])
df_list_start_sub <- df_list_start[1:10,]
XmYm_start <- lapply(df_list_start_sub, function(x) x[x$first_derivative == max(x$first_derivative, na.rm = TRUE)[1],])
XrYr_start <- lapply(df_list_start, function(x) x[x$time_frame == min(x$time_frame)[1],])
lapply(XmYm_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
lapply(XrYr_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
start_area_list <- purrr::pmap(list(df_list_start, XmYm_start, XrYr_start),
function(x,y,z) unlist(lapply(x$time_frame, function(a)
0.5*((y$DPA - x[x$time_frame == a,]$DPA)* (2*y$time_frame  - (max(x$time_frame) - x[x$time_frame == a,]$time_frame)
- z$time_frame)))))
df_list_start <- purrr::map2(start_area_list, df_list_start, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_start)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 100)
test_VNO_back_1Hz[1:10,]
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the start of one peak
#' @export
#'
#' @examples
find_start <- function(peaks, full_data, range){
print("inside find_start")
df_list_start <- lapply(peaks, subset_window, dt_2 = full_data, period = "start")
#df_list_start <- lapply(peaks, function(x) full_data[full_data$Cell_id == x$Cell_id])
df_list_start <- lapply(df_list_start, function(x) x[order(-x$time_frame),])
df_list_start_sub <- lapply(df_list_start, function(x) x[1:10,])
XmYm_start <- lapply(df_list_start_sub, function(x) x[x$first_derivative == max(x$first_derivative, na.rm = TRUE)[1],])
XrYr_start <- lapply(df_list_start, function(x) x[x$time_frame == min(x$time_frame)[1],])
lapply(XmYm_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
lapply(XrYr_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
start_area_list <- purrr::pmap(list(df_list_start, XmYm_start, XrYr_start),
function(x,y,z) unlist(lapply(x$time_frame, function(a)
0.5*((y$DPA - x[x$time_frame == a,]$DPA)* (2*y$time_frame  - (max(x$time_frame) - x[x$time_frame == a,]$time_frame)
- z$time_frame)))))
df_list_start <- purrr::map2(start_area_list, df_list_start, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_start)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 100)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "cahr", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caea", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caew", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
library(devtools)
test_classify_1Hz
View(test_classify_1Hz)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "baar", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "babl", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "badb", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "baea", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "baem", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bafr", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bahk", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "baip", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "baib", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "first_derivative", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "DPA", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "smooth_DPA", line = FALSE, show_peak = TRUE)
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
XmYm_end <- lapply(df_list_end, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
lapply(XmYm_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
lapply(XrYr_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$DPA -
x[x$time_frame == a,]$DPA)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the start of one peak
#' @export
#'
#' @examples
find_start <- function(peaks, full_data, range){
print("inside find_start")
df_list_start <- lapply(peaks, subset_window, dt_2 = full_data, period = "start")
#df_list_start <- lapply(peaks, function(x) full_data[full_data$Cell_id == x$Cell_id])
df_list_start <- lapply(df_list_start, function(x) x[order(-x$time_frame),])
df_list_start_sub <- lapply(df_list_start, function(x) x[1:10,])
XmYm_start <- lapply(df_list_start_sub, function(x) x[x$first_derivative == max(x$first_derivative, na.rm = TRUE)[1],])
XrYr_start <- lapply(df_list_start, function(x) x[x$time_frame == min(x$time_frame)[1],])
#lapply(XmYm_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
#lapply(XrYr_start, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
start_area_list <- purrr::pmap(list(df_list_start, XmYm_start, XrYr_start),
function(x,y,z) unlist(lapply(x$time_frame, function(a)
0.5*((y$DPA - x[x$time_frame == a,]$DPA)* (2*y$time_frame  - (max(x$time_frame) - x[x$time_frame == a,]$time_frame)
- z$time_frame)))))
df_list_start <- purrr::map2(start_area_list, df_list_start, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_start)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 100)
simple_cell_plot(test_VNO_norm_1Hz, cell = "bajh", var = "Mean_Grey", line = FALSE) + geom_point(aes(x = 188, y = 23623))
simple_cell_plot(test_VNO_norm_1Hz, cell = "bajh", var = "Mean_Grey", line = FALSE) + geom_point(aes(x = 188, y = 23623)) + geom_point(aes(x = 200, y = 19713))
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
df_list_start_sub <- lapply(df_list_start, function(x) x[1:20,])
XmYm_end <- lapply(df_list_end, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
lapply(XmYm_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
lapply(XrYr_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$DPA -
x[x$time_frame == a,]$DPA)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 200)
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
df_list_end_sub <- lapply(df_list_end, function(x) x[1:20,])
XmYm_end <- lapply(df_list_end_sub, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
lapply(XmYm_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
lapply(XrYr_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$DPA -
x[x$time_frame == a,]$DPA)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 200)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
simple_cell_plot(test_VNO_norm_1Hz, cell = "bajh", var = "Mean_Grey", line = FALSE) + geom_point(aes(x = 114, y = 29552)) + geom_point(aes(x = 200, y = 19713))
simple_cell_plot(test_VNO_norm_1Hz, cell = "bajh", var = "Mean_Grey", line = FALSE) + geom_point(aes(x = 114, y = 29552)) + geom_point(aes(x = 285, y = 11243))
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
df_list_end_sub <- lapply(df_list_end, function(x) x[1:20,])
XmYm_end <- lapply(df_list_end_sub, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
lapply(XmYm_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
lapply(XrYr_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$Mean_Grey -
x[x$time_frame == a,]$Mean_Grey)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 200)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caew", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caea", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "faxu", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "faxe", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "faxx", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "faxw", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "cahq", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caga", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "cahl", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "cakb", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "calg", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "calj", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caly", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "canu", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caoa", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caoa", var = "gam_detrended", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "gam_detrended", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "gam_detrended", line = "gam", show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = "gam", show_peak = TRUE)
simple_cell_plot(test_VNO_norm_1Hz, cell = "bajh", var = "Mean_Grey", line = FALSE) + geom_point(aes(x = 114, y = 29552)) + geom_point(aes(x = 285, y = 11243))
simple_cell_plot(test_VNO_norm_1Hz, cell = "bajh", var = "local_mean", line = FALSE) + geom_point(aes(x = 114, y = 29552)) + geom_point(aes(x = 285, y = 11243))
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
df_list_end_sub <- lapply(df_list_end, function(x) x[1:20,])
XmYm_end <- lapply(df_list_end_sub, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
lapply(XmYm_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
lapply(XrYr_end, function(x) if(x$Cell_id[1] == "bajh") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$local_mean -
x[x$time_frame == a,]$local_mean)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 200)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = , FALSE show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caea", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caew", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "faxx", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caje", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caih", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "cahr", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "local_mean", line = FALSE) + geom_point(aes(x = 114, y = 29552)) + geom_point(aes(x = 285, y = 11243))
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
df_list_end_sub <- lapply(df_list_end, function(x) x[1:20,])
XmYm_end <- lapply(df_list_end_sub, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
lapply(XmYm_end, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
lapply(XrYr_end, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$local_mean -
x[x$time_frame == a,]$local_mean)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 200)
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "local_mean", line = FALSE) + geom_point(aes(x = 90, y = 46014)) + geom_point(aes(x = 281, y = 41133))
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 150)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "cahr", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "local_mean", line = FALSE) + geom_point(aes(x = 90, y = 46014)) + geom_point(aes(x = 231, y = 48645))
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
df_list_end_sub <- lapply(df_list_end, function(x) x[1:20,])
XmYm_end <- lapply(df_list_end_sub, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
#XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$local_mean == min(x$local_mean, na.rm = TRUE),])
lapply(XmYm_end, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
lapply(XrYr_end, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$local_mean -
x[x$time_frame == a,]$local_mean)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 200)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "cahr", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
simple_cell_plot(test_VNO_norm_1Hz, cell = "cahr", var = "local_mean", line = FALSE) + geom_point(aes(x = 90, y = 46014)) + geom_point(aes(x = 184, y = 35191))
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caew", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caea", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "baar", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "babl", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
#'
#'
#' @param peaks A list of dataframe with each element being the informations of a peak
#' @param full_data
#' @param range the time window after the maxima of the peak in wich to look for the end
#'
#' @return A list of data table objects with each element being the informations regarding the end of one peak
#' @export
#'
#' @examples
find_end <- function(peaks, full_data, range){
df_list_end <- lapply(peaks, subset_window, dt_2 = full_data, period = "end")
df_list_end_sub <- lapply(df_list_end, function(x) x[1:20,])
XmYm_end <- lapply(df_list_end_sub, function(x) x[x$first_derivative == min(x$first_derivative, na.rm = TRUE),])
#XrYr_end <- lapply(df_list_end, function(x) x[x$time_frame == max(x$time_frame, na.rm = TRUE),])
XrYr_end <- lapply(df_list_end, function(x) x[x$local_mean == min(x$local_mean, na.rm = TRUE),])
#lapply(XmYm_end, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
#lapply(XrYr_end, function(x) if(x$Cell_id[1] == "cahr") {print(x)})
# Computing the area of the trapezoid for each i :
end_area_list <- purrr::pmap(list(df_list_end, XmYm_end, XrYr_end),
function(x,y,z) unlist(lapply(x$time_frame, function(a) 0.5*((y$DPA -
x[x$time_frame == a,]$DPA)*((2*z$time_frame) - x[x$time_frame == a,]$time_frame) - (y$time_frame)))))
df_list_end <- purrr::map2(end_area_list, df_list_end, function(x,y) y[which(x == max(x, na.rm=TRUE))[1],])
return(df_list_end)
}
library(CalQuick)
VNO <- prepareData("VNO", 5, 0.25, compare_groups = TRUE)
test_VNO_clean_1Hz <- clean_data(VNO, 0.1, 2, mean_width = 15, DPA_width = 5, mean_width_diff = 5)
test_VNO_back_1Hz <- backEstimate(test_VNO_clean_1Hz, method = "gam")
test_VNO_norm_1Hz <- norm_df(test_VNO_back_1Hz, var = "gam", width = 10)
test_VNO_peaks_1Hz <- find_peaks(test_VNO_norm_1Hz, threshold = 3, smooth = TRUE)
test_VNO_best_1Hz <- keep_best_peaks(test_VNO_peaks_1Hz, 5)
test_VNO_best_1Hz
test_borders_1Hz <- find_borders(test_VNO_best_1Hz, 150)
test_classify_1Hz <- classify_peaks(test_borders_1Hz, time_thresh = 1, frame_rate = 0.25)
test_resp_1 <- Analyze_Responses(test_classify_1Hz, test_VNO_clean_1Hz, compare_groups = TRUE)
test_resp_1
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "babl", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caea", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "caew", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
cell_plot(test_VNO_norm_1Hz, test_borders_1Hz[[1]], cell = "bajh", var = "Mean_Grey", line = FALSE, show_peak = TRUE)
install_github("ETrives/CalQUick", auth_token = "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")
