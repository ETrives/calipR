Var = "Mean_Grey")
print("first back ok")
back_data_bis <- backEstimatR(clean_data,back_data)
print("entering norm")
norm_data <- norm_df(back_data_bis, var = "back", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "background_detrended",
lambda = lam, gam = ga)
print("finishing")
}
if(back_method == "mean_10"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, median_10s_before := median(.SD[time_frame %in% seq(110,120)]$Mean_Grey, na.rm = TRUE), by = Cell_id]
back_data[, mean_median := mean(.SD[time_frame %in% seq(110,120) & Mean_Grey <= median_10s_before]$Mean_Grey , na.rm = TRUE), by = Cell_id]
back_data[, gam_detrended := Mean_Grey - mean_median, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$mean_median10 <- back_data$mean_median
}
if(back_method == "roll_mean"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, rolling_mean := gplots::wapply(time_frame, Mean_Grey,fun = mean,
n = length(time_frame),  width = roll_mean_width, method = "nobs")[[2]], by = Cell_id]
back_data[, gam_detrended := Mean_Grey - rolling_mean, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_mean <- back_data$rolling_mean
}
if(back_method == "roll_pct"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data <- rolling_pct(back_data, rolling_pct_width, pct_lower =0.1, pct_upper =0.4, it = seq(1,2))
back_data[, gam_detrended := Mean_Grey - Mean_Grey2, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_pct <- back_data$Mean_Grey2
}
if(back_method == "DPA") {
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
print("finishing")
}
return(deconvolve_data)
}
res_max_v1.0.0 <- ROC_pipe(dt = data,pos = pos_max, neg = neg_max, manual = manual,
win = c(80,120,200), manual_adjusted=manual_adjusted,
new_length = 30, reference = "baseline")
launchPipe <- function(data = NULL, path_to_file = "test1", rate = 1,thresh = 3, lam = 1000,
ga = 0.90, back_method = "back", roll_mean_width = 150,
rolling_pct_width = 50,pos_bank,neg_bank, windows, new_length = 30,
reference = "baseline"){
#pos_bank <- readRDS("projects/test1/pos_increased")
#neg_bank <- readRDS("projects/test1/neg_increased")
if(is.null(data)){
data <- prepareData(path_to_file, frame_rate = rate, duration_in_seconds = 30)
}
# Nouvel algo
if(back_method == "back"){
clean_data <- clean_data(data, method = "back", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10)
back_data <- patDetectR(clean_data,window = c(80,120,200), pos_bank, neg_bank,new_len = 30,
Var = "Mean_Grey")
print("first back ok")
back_data_bis <- backEstimatR(clean_data,back_data)
print("entering norm")
norm_data <- norm_df(back_data_bis, var = "back", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "background_detrended",
lambda = lam, gam = ga)
print("finishing")
}
if(back_method == "mean_10"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, median_10s_before := median(.SD[time_frame %in% seq(110,120)]$Mean_Grey, na.rm = TRUE), by = Cell_id]
back_data[, mean_median := mean(.SD[time_frame %in% seq(110,120) & Mean_Grey <= median_10s_before]$Mean_Grey , na.rm = TRUE), by = Cell_id]
back_data[, gam_detrended := Mean_Grey - mean_median, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$mean_median10 <- back_data$mean_median
}
if(back_method == "roll_mean"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, rolling_mean := gplots::wapply(time_frame, Mean_Grey,fun = mean,
n = length(time_frame),  width = roll_mean_width, method = "nobs")[[2]], by = Cell_id]
back_data[, gam_detrended := Mean_Grey - rolling_mean, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_mean <- back_data$rolling_mean
}
if(back_method == "roll_pct"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data <- rolling_pct(back_data, rolling_pct_width, pct_lower =0.1, pct_upper =0.4, it = seq(1,2))
back_data[, gam_detrended := Mean_Grey - Mean_Grey2, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_pct <- back_data$Mean_Grey2
}
if(back_method == "DPA") {
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
print("finishing")
}
return(deconvolve_data)
}
res_max_v1.0.0 <- ROC_pipe(dt = data,pos = pos_max, neg = neg_max, manual = manual,
win = c(80,120,200), manual_adjusted=manual_adjusted,
new_length = 30, reference = "baseline")
launchPipe <- function(data = NULL, path_to_file = "test1", rate = 1,thresh = 3, lam = 1000,
ga = 0.90, back_method = "back", roll_mean_width = 150,
rolling_pct_width = 50,pos_bank,neg_bank, windows, new_length = 30,
reference = "baseline"){
#pos_bank <- readRDS("projects/test1/pos_increased")
#neg_bank <- readRDS("projects/test1/neg_increased")
if(is.null(data)){
data <- prepareData(path_to_file, frame_rate = rate, duration_in_seconds = 30)
}
# Nouvel algo
if(back_method == "back"){
clean_data <- clean_data(data, method = "back", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10)
back_data <- patDetectR(clean_data, window = c(80,120,200), pos_bank, neg_bank,new_len = 30
Var = "Mean_Grey")
launchPipe <- function(data = NULL, path_to_file = "test1", rate = 1,thresh = 3, lam = 1000,
ga = 0.90, back_method = "back", roll_mean_width = 150,
rolling_pct_width = 50,pos_bank,neg_bank, windows, new_length = 30,
reference = "baseline"){
#pos_bank <- readRDS("projects/test1/pos_increased")
#neg_bank <- readRDS("projects/test1/neg_increased")
if(is.null(data)){
data <- prepareData(path_to_file, frame_rate = rate, duration_in_seconds = 30)
}
# Nouvel algo
if(back_method == "back"){
clean_data <- clean_data(data, method = "back", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10)
back_data <- patDetectR(clean_data, window = c(80,120,200), pos_bank, neg_bank,new_len = 30,
Var = "Mean_Grey")
print("first back ok")
back_data_bis <- backEstimatR(clean_data,back_data)
print("entering norm")
norm_data <- norm_df(back_data_bis, var = "back", width = 10)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "background_detrended",
lambda = lam, gam = ga)
print("finishing")
}
if(back_method == "mean_10"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, median_10s_before := median(.SD[time_frame %in% seq(110,120)]$Mean_Grey, na.rm = TRUE), by = Cell_id]
back_data[, mean_median := mean(.SD[time_frame %in% seq(110,120) & Mean_Grey <= median_10s_before]$Mean_Grey , na.rm = TRUE), by = Cell_id]
back_data[, gam_detrended := Mean_Grey - mean_median, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$mean_median10 <- back_data$mean_median
}
if(back_method == "roll_mean"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, rolling_mean := gplots::wapply(time_frame, Mean_Grey,fun = mean,
n = length(time_frame),  width = roll_mean_width, method = "nobs")[[2]], by = Cell_id]
back_data[, gam_detrended := Mean_Grey - rolling_mean, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_mean <- back_data$rolling_mean
}
if(back_method == "roll_pct"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data <- rolling_pct(back_data, rolling_pct_width, pct_lower =0.1, pct_upper =0.4, it = seq(1,2))
back_data[, gam_detrended := Mean_Grey - Mean_Grey2, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_pct <- back_data$Mean_Grey2
}
if(back_method == "DPA") {
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
print("finishing")
}
return(deconvolve_data)
}
res_max_v1.0.0 <- ROC_pipe(dt = data,pos = pos_max, neg = neg_max, manual = manual,
win = c(80,120,200), manual_adjusted=manual_adjusted,
new_length = 30, reference = "baseline")
set.seed(123)
set.seed(123)
res_robustness_max_v1.0.0 <- lapply(seq(0, 50), function(x)
precision_recall(add_weird_cells(res_max_v1.0.0[[1]],
false_pos, x), var = 'auto_var', by = "stimulus"))
max_v1.0.0 <- extracting_data_for_plot(list(res_robustness_max_v1.0.0),
plage = c(1:1), pct = pct, combination_increment = 15,
mean = FALSE)
max_v1.0.0$combination <- factor(max_v1.0.0$combination, levels = c("16"))
ggplot(data = max_v1.0.0 ,aes(x=mean_Recall,y=mean_Precision))+
geom_line(aes(group = combination,color=combination),size = 1)+
geom_point(aes(group = combination,color=combination),size = 1)+
scale_color_viridis_d(option = "D")+
facet_wrap(~percent_noise)+
ylim(c(0,1))+
xlim(c(0,1))+
theme_bw()
# poorer recall :
cells <- res_max_v1.0.0[[1]][threshold == 2 & manual_response == 1 & auto_var == 0 & stimulus == "2.Pup_Wash"]$Cell_id
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[22]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[1]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[2]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[3]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[4]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[5]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[6]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[7]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[8]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[9]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[10]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
cells <- c("A1aab", "A1aap", "A1abm", "A1acl", "A1adj", "A1aec" ,"A1afb", "A1agk", "A1agm", "A1ahc", "A1ail",
"A1aiw", "A1ajo", "A1aju", "A1akq", "A1alp", "A1amt", "A1anc", "A1anj", "A1ank", "A1ans", "A1anu",
"A1any", "A1apd", "A1apf", "A1apn", "A1aqd", "A1aqh", "A1aqm", "A1arf", "A1arr", "A1asl", "A1atz",
"A1avd", "A1avt", "A1avz", "A1awu", "A1awz", "A1ayi", "A1azf", "A1azj", "A1azn", "A1azo", "A1azs",
"A1azx", "A1azy", "A1bax", "A1bba", "A1bbc", "A1bbg", "A1bbp", "A1bbq", "A1bbr" ,"A1bbs", "A1bca",
"A1bcf", "A1bci", "A1bdd")
cells
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[1]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[2]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[3]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[4]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[5]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[6]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[7]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[8]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[9]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[10]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[11]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[12]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[13]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[14]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[15]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[16]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[17]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[18]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[19]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[20]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
ggplot(res_max_v1.0.0[[2]][[2]][Cell_id == cells[[21]]])+
geom_line(aes(x=time_frame, y = Mean_Grey))+
geom_line(aes(x=time_frame, y = background))
patDetectR <- function(dt, posBank, negBank, Var, Norm = TRUE, windows = NULL) {
if(is.null(windows)){
posBank<-posBank[!sapply(posBank,is.null)]
negBank<-negBank[!sapply(negBank,is.null)]
max_window <- max(unlist(lapply(posBank, length)), na.rm = TRUE)
min_window <- min(unlist(lapply(posBank, length)), na.rm = TRUE)
max_window_neg <- max(unlist(lapply(negBank, length)), na.rm = TRUE)
min_window_neg <- min(unlist(lapply(negBank, length)), na.rm = TRUE)
min_w <- min(min_window,min_window_neg, na.rm=TRUE)
max_w <- max(max_window,max_window_neg, na.rm=TRUE)
med_w <- round(median(min_w,max_w))
window <- c(min_w, med_w, max_w)
new_len <- max_w
}
else{
window <- windows
new_len <- 30
}
# Extending the trace so that patterns in its end can be fully screened with large
# windows :
dt <- dt[, rbind(.SD,.SD[rep(.N, max(window)),]), by = Cell_id]
# Computing steps for rolling subsequencing:
step <- as.integer(sqrt(window))* 2
# Subsequencing, Interpolation and Normalization
data <- subinoR(dt, window, step, new_len, posBank, negBank, var = Var, norm = Norm)
# DTW distance computing between each subsequence and each pattern
pos <- distcomputR(data[[2]], data[[1]], step, window)
neg <- distcomputR(data[[3]], data[[1]], step, window)
# Median distance extraction by index and Ratio between pos and neg median dist
res <- mdRatio(pos, neg)
return(res)
}
patDetectR <- function(dt, posBank, negBank, Var, Norm = TRUE, windows = NULL) {
if(is.null(windows)){
posBank<-posBank[!sapply(posBank,is.null)]
negBank<-negBank[!sapply(negBank,is.null)]
max_window <- max(unlist(lapply(posBank, length)), na.rm = TRUE)
min_window <- min(unlist(lapply(posBank, length)), na.rm = TRUE)
max_window_neg <- max(unlist(lapply(negBank, length)), na.rm = TRUE)
min_window_neg <- min(unlist(lapply(negBank, length)), na.rm = TRUE)
min_w <- min(min_window,min_window_neg, na.rm=TRUE)
max_w <- max(max_window,max_window_neg, na.rm=TRUE)
med_w <- round(median(min_w,max_w))
window <- c(min_w, med_w, max_w)
new_len <- max_w
}
else{
window <- windows
new_len <- 30
}
# Extending the trace so that patterns in its end can be fully screened with large
# windows :
dt <- dt[, rbind(.SD,.SD[rep(.N, max(window)),]), by = Cell_id]
# Computing steps for rolling subsequencing:
step <- as.integer(sqrt(window))* 2
# Subsequencing, Interpolation and Normalization
data <- subinoR(dt, window, step, new_len, posBank, negBank, var = Var, norm = Norm)
# DTW distance computing between each subsequence and each pattern
pos <- distcomputR(data[[2]], data[[1]], step, window)
neg <- distcomputR(data[[3]], data[[1]], step, window)
# Median distance extraction by index and Ratio between pos and neg median dist
res <- mdRatio(pos, neg)
return(res)
}
launchPipe <- function(data = NULL, path_to_file = "test1", rate = 1,thresh = 3, lam = 1000,
ga = 0.90, back_method = "back", roll_mean_width = 150,
rolling_pct_width = 50,pos_bank,neg_bank, windows, new_length = 30,
reference = "baseline"){
#pos_bank <- readRDS("projects/test1/pos_increased")
#neg_bank <- readRDS("projects/test1/neg_increased")
if(is.null(data)){
data <- prepareData(path_to_file, frame_rate = rate, duration_in_seconds = 30)
}
# Nouvel algo
if(back_method == "back"){
clean_data <- clean_data(data, method = "back", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10)
back_data <- patDetectR(clean_data, pos_bank, neg_bank,
Var = "Mean_Grey")
print("first back ok")
back_data_bis <- backEstimatR(clean_data,back_data)
print("entering norm")
norm_data <- norm_df(back_data_bis, var = "back", width = 10)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "background_detrended",
lambda = lam, gam = ga)
print("finishing")
}
if(back_method == "mean_10"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, median_10s_before := median(.SD[time_frame %in% seq(110,120)]$Mean_Grey, na.rm = TRUE), by = Cell_id]
back_data[, mean_median := mean(.SD[time_frame %in% seq(110,120) & Mean_Grey <= median_10s_before]$Mean_Grey , na.rm = TRUE), by = Cell_id]
back_data[, gam_detrended := Mean_Grey - mean_median, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$mean_median10 <- back_data$mean_median
}
if(back_method == "roll_mean"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data[, rolling_mean := gplots::wapply(time_frame, Mean_Grey,fun = mean,
n = length(time_frame),  width = roll_mean_width, method = "nobs")[[2]], by = Cell_id]
back_data[, gam_detrended := Mean_Grey - rolling_mean, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_mean <- back_data$rolling_mean
}
if(back_method == "roll_pct"){
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
back_data <- rolling_pct(back_data, rolling_pct_width, pct_lower =0.1, pct_upper =0.4, it = seq(1,2))
back_data[, gam_detrended := Mean_Grey - Mean_Grey2, by = Cell_id]
norm_data <- norm_df(back_data, var = "gam", width = 10,reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
deconvolve_data[[2]]$rolling_pct <- back_data$Mean_Grey2
}
if(back_method == "DPA") {
clean_data <- clean_data(data, method = "DPA", moving_threshold = 0.1,
mean_width = 10,mean_width_diff = 10, DPA_width = 10, CN_DPA_width = 10)
back_data <- backEstimate(clean_data, method = "gam")
norm_data <- norm_df(back_data, var = "gam", width = 10, reference = reference)
print("deconvolving")
deconvolve_data <- deconvolve(norm_data, var = "gam_detrended",
lambda = lam, gam = ga)
print("finishing")
}
return(deconvolve_data)
}
res_max_v1.0.0_auto_win <- ROC_pipe(dt = data,pos = pos_max, neg = neg_max, manual = manual,
manual_adjusted=manual_adjusted, reference = "baseline")
set.seed(123)
res_robustness_max_v1.0.0_auto_win <- lapply(seq(0, 50), function(x)
precision_recall(add_weird_cells(res_max_v1.0.0_auto_win[[1]],
false_pos, x), var = 'auto_var', by = "stimulus"))
max_v1.0.0_auto_win <- extracting_data_for_plot(list(res_robustness_max_v1.0.0_auto_win),
plage = c(1:1), pct = pct, combination_increment = 15,
mean = FALSE)
max_v1.0.0_auto_win$combination <- factor(max_v1.0.0_auto_win$combination, levels = c("16"))
ggplot(data = max_v1.0.0_auto_win ,aes(x=mean_Recall,y=mean_Precision))+
geom_line(aes(group = combination,color=combination),size = 1)+
geom_point(aes(group = combination,color=combination),size = 1)+
scale_color_viridis_d(option = "D")+
facet_wrap(~percent_noise)+
ylim(c(0,1))+
xlim(c(0,1))+
theme_bw()
View(mdRatio)
View(distcomputR)
