c <- LETTERS[sample.int(26,1)]
w <- paste0(paste0(a,b),c)
}
else{
w <- letters[coverslip_id]
}
if(length(w[which(is.na(w))]) != 0){
print( "HOUKAL")
na_cov <- length(w[which(is.na(w))])
second_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
third_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
dbl <- paste0(second_letter_list, third_letter_list)
w[which(is.na(w))] <- dbl
}
for(i in cells){
x <- letters[index1]
index1 = index1 + 1
index2 = 1
for(j in i) {
y <- letters[index2]
index2 = index2 + 1
index3 = 1
for(h in j){
z <- letters[index3]
id <- paste0(w,x,y,z)
id_list[[list_index]] <- id
list_index = list_index + 1
index3 = index3 + 1
}
}
}
return(id_list)
}
launch_GuiGui()
launch_GuiGui()
#' @examples
prepareData <- function(folder_name, stim_number, frame_rate,  duration_in_seconds = 30, compare_groups = FALSE, marker_thresh
) {
# Get the file names and store the content in a list of df :
myFiles <- list.files(folder_name, pattern = "\\.csv", recursive = T, full.names = T)
len_before <- length(myFiles)
# Removing the meta_data file :
myFiles <- myFiles[!stringr::str_detect(myFiles,pattern="meta") & !stringr::str_detect(myFiles,pattern="marker")]
len_after <- length(myFiles)
meta <- list.files(folder_name, pattern = "meta", recursive = T, full.names = T)
df_list <- vector(mode = "list", length = length(myFiles))
# Reading all the data files
df_list <- lapply(myFiles, function(x) data.table::fread(x, skip = 1, header = FALSE))
df_list <- lapply(df_list, function(x) x[,2:length(x)])
df_list <- lapply(df_list, function(x) data.table::setnames(x, paste0(rep("Mean", length(x)), seq(1: length(x)))))
# Checking if marker files have been added
if(len_before - len_after > 1){
print("yes")
marker <- list.files(folder_name, pattern = "marker", recursive = T, full.names = T)
# Reading the files
marker_list <- lapply(marker, function(x) data.table::fread(x, skip = 1, header = FALSE))
marker_list <- lapply(marker_list, function(x) x[,2:length(x)])
marker_list <- lapply(marker_list, function(x) data.table::setnames(x, paste0(rep("Mean", length(x)), seq(1: length(x)))))
print(marker_list)
}
else{
marker_list <- NULL
}
# Code pour récupérer uniquement le numéro du coverslip et lui ajouter une lettre :
index_cov <-length(stringr::str_split(myFiles[[1]], "/")[[1]])
coverslip_id <- lapply(myFiles, function(x) as.integer(stringr::str_replace_all(stringr::str_split(x, "/")[[1]][index_cov], "[.csv.]", "")))
letter_list <- LETTERS[seq(from = 1, to = length(myFiles))]
if(length(letter_list[which(is.na(letter_list))]) != 0){
print( "HOUKAL")
na_cov <- length(letter_list[which(is.na(letter_list))])
second_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
third_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
dbl <- paste0(second_letter_list, third_letter_list)
letter_list[which(is.na(letter_list))] <- dbl
}
coverslip_id <- purrr::map2(letter_list, coverslip_id, function(x,y) paste(x,y,sep =""))
# Fetching the stimuli informations :
meta_df <- data.table::fread(meta)
stimuli <- meta_df$stimuli
stimuli <- split(stimuli, ceiling(seq_along(stimuli)/stim_number))
#stimuli <- lapply(stimuli, function(x) purrr::map2(seq_along(1:stim_number), x, function(y, z) paste(y,z, sep=".")))
# now the time informations :
each <- meta_df$timing
each <- split(each, ceiling(seq_along(each)/stim_number))
# Get the pattern to find in the colnames for the cell_srt function :
pattern <- substr(colnames(df_list[[1]])[2], 1,4)
### Code pour récupérer uniquement le groupe auquel appartient un coverslip
index_gr <-length(stringr::str_split(myFiles[[1]], "/")[[1]])-2
group_list <- lapply(myFiles, function(x) stringr::str_split(x, "/")[[1]][index_gr])
if(compare_groups == TRUE) {
for(i in 1:length(df_list)){
# voir pour executer tidy_df sur chaque élément de df_list via un pmap ? :
df_list[[i]] <- tidy_df(df_list[[i]],stimuli[[i]], each[[i]], pattern,
duration_in_seconds, frame_rate, coverslip_id = coverslip_id[[i]], id = i,
multiple = TRUE, compare_groups = TRUE, group_list[[i]], marker_list[[i]], marker_thresh)
}
}
if(compare_groups == FALSE) {
for(i in 1:length(df_list)){
df_list[[i]] <- tidy_df(df_list[[i]],stimuli[[i]], each[[i]], pattern, duration_in_seconds,
frame_rate, coverslip_id = i, id = i, multiple = TRUE, compare_groups = FALSE,
group_list[[i]], marker_list[[i]], marker_thresh)
}
}
df <- do.call(rbind, df_list)
df$marker_positive <- as.factor(df$marker_positive)
df$group <- as.factor(df$group)
df$stimulus <- as.factor(df$stimulus)
df$coverslip <- as.factor(df$coverslip)
print(df)
#write.csv(df, "df_manip_maxime.csv")
return(df)
}
launch_GuiGui()
launch_GuiGui()
#' Analyze_Responses
#'
#' @param data
#' @param df_clean
#' @param compare_groups
#'
#' @return
#' @export
#'
#' @examples
Analyze_Responses <- function(data, df_clean, compare_groups = FALSE, one_cell = FALSE, marker = FALSE, var_list = NULL, simulation = FALSE){
data$spike_stimulus <- str_replace_all(data$spike_stimulus, "[123456789.]", "")
#data$spike_stimulus
df_clean$stimulus
### Adding a variable "Response" for each stimulus in df_clean
'%notin%' <- Negate('%in%')
#data$marker_positive <- as.factor(data$marker_positive)
mark_lev <- unique(df_clean$marker_positive)
df_clean$marker_positive <- factor(df_clean$marker_positive, levels = mark_lev, ordered = TRUE)
#data$group <- as.factor(data$group)
group_lev <- unique(df_clean$group)
df_clean$group  <- factor(df_clean$group, levels = group_lev, ordered = TRUE)
#data$stimulus <- as.factor(data$stimulus)
stim_lev <- unique(df_clean$stimulus)
df_clean$stimulus  <- factor(df_clean$stimulus, levels = stim_lev, ordered = TRUE)
#data$coverslip <- as.factor(data$coverslip)
cov_lev <- unique(df_clean$coverslip)
df_clean$coverslip  <- factor(df_clean$coverslip, levels = cov_lev, ordered = TRUE)
print(str(data))
if(simulation == TRUE){
d <- unique(df_clean[,c("Cell_id", "stimulus")])
}
else if(simulation == FALSE){
if(is.null(var_list) & compare_groups == FALSE) {
d <- unique(df_clean[,c("Cell_id", "stimulus")])
print(d)
print("hiou")
}
else if(is.null(var_list) & compare_groups == TRUE){
d <- unique(df_clean[,c("Cell_id", "stimulus", "group")])
}
else{
d <- unique(df_clean[,c(c("Cell_id","stimulus"), var_list)])
#print(df_clean)
#d <- unique(d[,c(c("Cell_id", "Response"), ..var_list)])
}
}
d_list <- split(d,cumsum(1:nrow(d) %in% seq(1:nrow(d))))
d_list <- lapply(d_list, function(x) data.table::setDT(x)[, Response := ifelse(is.na(
data[data$Cell_id == x$Cell_id &
data$spike_stimulus == x$stimulus,]$Cell_id[1]),
FALSE, TRUE) ])
d <- do.call(rbind, d_list)
print(d)
print("haiou")
stim_list <- unique(d$stimulus)
n_cells_tot <- length(unique(d$Cell_id))
if("coverslip" %in% var_list){
n_cells_cov <- d[, .(n_cells = length(unique(Cell_id))), by = coverslip]
}
if("group" %in% var_list){
n_cells_grp <- d[, .(n_cells = length(unique(Cell_id))), by = group]
print(n_cells_grp)
}
if("marker_positive" %in% var_list){
marker_list <- unique(d$marker_positive)
}
n_cells_cond <- d[, .(n_cells = length(unique(Cell_id))), by = var_list]
print(d)
print(n_cells_cond)
if(simulation == TRUE) {
print("second part of simulation")
data <- d[, .(Responders = sum(Response)), by = stimulus]
data <- data[, c("Prop", "n_cells_tot") := list(Responders/ n_cells_tot, n_cells_tot)]
}
else{
if(is.null(var_list)){
d <- unique(d[,c("Cell_id", "Response", "stimulus")])
print(d)
print("houla")
data <- d[, .(Responders = sum(Response))]
}
else{
d <- unique(d[,c(c("Cell_id", "Response"), ..var_list)])
data <- d[, .(Responders = sum(Response)), by = var_list]
}
print(data)
print("diii")
if("coverslip" %notin% var_list & "group" %notin% var_list & "marker_positive" %notin% var_list){
print("yyrhy")
data <- data[, c("Prop", "n_cells_tot") := list(Responders/ n_cells_tot, n_cells_tot)]
}
if("coverslip" %notin% var_list & "stimulus" %notin% var_list & "group" %in% var_list & "marker_positive" %notin% var_list){
print("yydfy")
print(n_cells_grp)
print(n_cells_grp$n_cells)
data <- data[, c("Prop", "n_cells_grp") := list(Responders/ n_cells_grp$n_cells, n_cells_grp$n_cells)]
}
if("coverslip" %notin% var_list & "stimulus" %in% var_list & "group" %in% var_list & "marker_positive" %notin% var_list){
print("yyyze")
n_cells_grp <- rep(n_cells_grp$n_cells, each = length(stim_list))
data <- data[, c("Prop", "n_cells_grp") := list(Responders/ n_cells_grp, n_cells_grp)]
}
if("coverslip" %notin% var_list & "stimulus" %notin% var_list & "group" %notin% var_list & "marker_positive" %in% var_list){
print("yyz")
n_cells_tot <- rep(n_cells_tot, each = length(marker_list))
data <- data[, c("n_cells_tot", "Prop_tot", "n_cells_marker", "Prop_marker_resp", "Prop_marker")
:= list(n_cells_tot, Responders/ n_cells_tot, n_cells_cond$n_cells,
Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells/n_cells_tot )]
}
if("coverslip" %notin% var_list & "group" %notin% var_list & "stimulus" %in% var_list & "marker_positive" %in% var_list){
print("y")
n_cells_cond <- rep(n_cells_cond$n_cells, each = length(stim_list))
n_cells_tot <- rep(n_cells_tot, each = length(marker_list)*length(stim_list))
data <- data[, c("n_cells_tot", "Prop_tot", "n_cells_marker", "Prop_marker_resp", "Prop_marker")
:= list(n_cells_tot, Responders/ n_cells_tot, n_cells_cond,
Responders/ n_cells_cond, n_cells_cond/n_cells_tot )]
}
if("coverslip" %notin% var_list & "group" %in% var_list & "stimulus" %in% var_list & "marker_positive" %in% var_list){
data$marker_positive <- factor(data$marker_positive, levels = marker_list, ordered = TRUE)
data <- data[order(marker_positive)]
print(n_cells_cond)
n_cells_cond <- n_cells_cond[order(marker_positive)]
print(data)
print(n_cells_cond)
print("dddattta")
#n_cells_cond <- rep(n_cells_cond$n_cells, each = length(stim_list))
print(n_cells_cond)
print("n_cells_cond")
group_list <- unique(d$group)
n_cells_grp <- rep(rep(n_cells_grp$n_cells, each = length(stim_list)), times = length(marker_list))
print(n_cells_grp)
print("ncellsgrp")
data <- data[, c("n_cells_grp", "Prop_tot", "n_cells_marker", "Prop_marker_resp", "Prop_marker")
:= list(n_cells_grp, Responders/ n_cells_grp, n_cells_cond$n_cells,
Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells/n_cells_grp )]
}
if("coverslip" %notin% var_list & "group" %in% var_list & "stimulus" %notin% var_list & "marker_positive" %in% var_list){
#data$marker_positive <- factor(data$marker_positive, levels = marker_list, ordered = TRUE)
data <- data[order(marker_positive)]
n_cells_cond <- n_cells_cond[order(marker_positive)]
group_list <- unique(d$group)
n_cells_tot <- rep(n_cells_tot, each = length(marker_list)*length(group_list))
n_cells_grp <- rep(n_cells_grp$n_cells, times = length(marker_list))
data <- data[, c("n_cells_grp", "Prop_tot", "n_cells_marker", "Prop_marker_resp", "Prop_marker")
:= list(n_cells_grp, Responders/ n_cells_grp, n_cells_cond$n_cells,
Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells/n_cells_grp )]
}
if("coverslip" %in% var_list & "stimulus" %notin% var_list & "group" %notin% var_list & "marker_positive" %notin% var_list){
print("yyyddd")
data <- data[, c("Prop", "n_cells_cov") := list(data$Responders/ n_cells_cov$n_cells, n_cells_cov$n_cells)]
}
if("coverslip" %in% var_list & "stimulus" %in% var_list & "marker_positive" %notin% var_list & "group" %notin% var_list){
print("yyzzzy")
n_cells_cov <- rep(n_cells_cov$n_cells, each = length(stim_list))
data <- data[, c("Prop", "n_cells_cov") := list(Responders/ n_cells_cov, n_cells_cov)]
}
if("coverslip" %in% var_list & "stimulus" %in% var_list & "marker_positive" %in% var_list & "group" %notin% var_list){
print("yyysdg")
#n_cells_cov_marker <- d[, .(n_cells = length(unique(Cell_id))), by = list(coverslip, marker_positive)]
data <- data[order(marker_positive)]
n_cells_cond <- n_cells_cond[order(marker_positive)]
#n_cells_cond <- rep(n_cells_cond$n_cells, each = length(stim_list))
n_cells_cov <- rep(rep(n_cells_cov$n_cells, each = length(stim_list)), times = length(marker_list))
data <- data[, c("Prop_cov_marker", "n_cells_cov_marker", "Prop_cov", "n_cells_cov", "Prop_pos_cells_cov") := list(Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells, Responders/ n_cells_cov, n_cells_cov, n_cells_cond$n_cells/n_cells_cov)]
}
if("coverslip" %in% var_list & "stimulus" %notin% var_list & "marker_positive" %in% var_list & "group" %notin% var_list){
print("yyysdg")
print(n_cells_cond)
n_cells_cond <- d[, .(n_cells = length(unique(Cell_id))), by = list(coverslip, marker_positive)]
data <- data[order(marker_positive)]
n_cells_cov <- rep(n_cells_cov$n_cells, times = length(marker_list))
#n_cells_cov_marker <- rep(n_cells_cov_marker$n_cells, times = length(marker_list))
data <- data[, c("Prop_cov_marker", "n_cells_cov_marker", "Prop_cov", "n_cells_cov", "Prop_pos_cells_cov") := list(Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells, Responders/ n_cells_cov , n_cells_cov, n_cells_cond/n_cells_cov)]
}
if("coverslip" %in% var_list & "stimulus" %notin% var_list & "marker_positive" %in% var_list & "group" %in% var_list){
print("yyysdg")
#n_cells_grp_cov_marker <- d[, .(n_cells = length(unique(Cell_id))), by = list(group, coverslip, marker_positive)]
#print(n_cells_grp_cov_marker)
print(data)
print("datt")
data <- data[order(marker_positive)]
n_cells_cond <- n_cells_cond[order(marker_positive)]
print(n_cells_cond)
n_cells_cov <- rep(n_cells_cov$n_cells, times = length(marker_list))
print(n_cells_cov)
data <- data[, c("Prop", "n_cells_cov_marker", "Prop_cov", "n_cell_cov") := list(Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells, Responders/n_cells_cov, n_cells_cov)]
n_cells_cond <- n_cells_cond[order(group, coverslip)]
print(n_cells_cond)
n_cov_group <-  d[, .(n_cov = length(unique(coverslip))), by = group]
print(n_cov_group)
data <- data[order(coverslip)]
print(data)
#n_cells_grp_cov_marker <- n_cells_grp_cov_marker[order(marker_positive)]
n_cells_grp <- unlist(lapply(seq(length(n_cov_group$n_cov)), function(x) rep(n_cells_grp$n_cells[[x]], each = n_cov_group$n_cov[[x]]*length(marker_list))))
print(n_cells_grp)
data <- data[, c("n_cells_grp", "Prop_marker_resp_grp", "Prop_marker_cov_grp", "Prop_marker_cov") := list(n_cells_grp, Responders / n_cells_grp, n_cells_cond$n_cells/n_cells_grp, n_cells_cond$n_cells/n_cell_cov )]
}
if("coverslip" %in% var_list & "stimulus" %in% var_list & "marker_positive" %in% var_list & "group" %in% var_list){
print("yyysdg")
#n_cells_grp_cov_marker <- d[, .(n_cells = length(unique(Cell_id))), by = list(group, coverslip, marker_positive)]
#print(n_cells_grp_cov_marker)
print(data)
print("datt")
data <- data[order(marker_positive)]
n_cells_cond <- n_cells_cond[order(marker_positive)]
print(n_cells_cond)
print(n_cells_cov)
print("n_cells_cov")
n_cells_cov <- rep(rep(n_cells_cov$n_cells, each = length(stim_list), times = length(marker_list)))
print(n_cells_cov)
data <- data[, c("Prop", "n_cells_cov_marker", "Prop_cov", "n_cell_cov") := list(Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells, Responders/n_cells_cov, n_cells_cov)]
n_cells_cond <- n_cells_cond[order(group, coverslip)]
print(n_cells_cond)
n_cov_group <-  d[, .(n_cov = length(unique(coverslip))), by = group]
print(n_cov_group)
data <- data[order(coverslip)]
print(data)
#n_cells_grp_cov_marker <- n_cells_grp_cov_marker[order(marker_positive)]
n_cells_grp <- rep(unlist(lapply(seq(length(n_cov_group$n_cov)), function(x) rep(n_cells_grp$n_cells[[x]], each = n_cov_group$n_cov[[x]]*length(marker_list)))), each = length(stim_list))
print(n_cells_grp)
data <- data[, c("n_cells_grp", "Prop_marker_resp_grp", "Prop_marker_cov_grp", "Prop_marker_cov") := list(n_cells_grp, Responders / n_cells_grp, n_cells_cond$n_cells/n_cells_grp, n_cells_cond$n_cells/n_cell_cov )]
}
if("coverslip" %in% var_list & "stimulus" %in% var_list & "marker_positive" %notin% var_list & "group" %in% var_list){
print("yyysdg")
#data <- data[order(marker_positive)]
n_cells_cond <- n_cells_cond[order(group)]
n_cells_cov <- rep(n_cells_cov$n_cells, each = length(stim_list))
print(n_cells_cov)
data <- data[, c("Prop", "n_cells_cov_marker", "Prop_cov", "n_cell_cov") := list(Responders/ n_cells_cond$n_cells, n_cells_cond$n_cells, Responders/n_cells_cov, n_cells_cov)]
n_cells_cond <- n_cells_cond[order(group, coverslip)]
print(n_cells_cond)
n_cov_group <-  d[, .(n_cov = length(unique(coverslip))), by = group]
print(n_cov_group)
data <- data[order(coverslip)]
print(data)
#n_cells_grp_cov_marker <- n_cells_grp_cov_marker[order(marker_positive)]
n_cells_grp <- rep(unlist(lapply(seq(length(n_cov_group$n_cov)), function(x) rep(n_cells_grp$n_cells[[x]], each = n_cov_group$n_cov[[x]]))), each = length(stim_list))
print(n_cells_grp)
data <- data[, c("n_cells_grp", "Prop_resp_grp", "Prop_cov_grp", "Prop_cov") := list(n_cells_grp, Responders / n_cells_grp, n_cells_cond$n_cells/n_cells_grp, n_cells_cond$n_cells/n_cell_cov )]
}
}
if(one_cell == FALSE & compare_groups == FALSE) {
res <- Compare_props(d)
}
if(one_cell == TRUE){
res = NULL
}
if(one_cell == FALSE & compare_groups == TRUE){
res <- "NO STATS"
}
#res <- glmer(Response ~ group * stimulus + (1|Cell_id), family = binomial, data = d)
print("Analyze Responses OK")
return(list(data, res))
}
#' @examples
prepareData <- function(folder_name, stim_number, frame_rate,  duration_in_seconds = 30, compare_groups = FALSE, marker_thresh
) {
# Get the file names and store the content in a list of df :
myFiles <- list.files(folder_name, pattern = "\\.csv", recursive = T, full.names = T)
len_before <- length(myFiles)
# Removing the meta_data file :
myFiles <- myFiles[!stringr::str_detect(myFiles,pattern="meta") & !stringr::str_detect(myFiles,pattern="marker")]
len_after <- length(myFiles)
meta <- list.files(folder_name, pattern = "meta", recursive = T, full.names = T)
df_list <- vector(mode = "list", length = length(myFiles))
# Reading all the data files
df_list <- lapply(myFiles, function(x) data.table::fread(x, skip = 1, header = FALSE))
df_list <- lapply(df_list, function(x) x[,2:length(x)])
df_list <- lapply(df_list, function(x) data.table::setnames(x, paste0(rep("Mean", length(x)), seq(1: length(x)))))
# Checking if marker files have been added
if(len_before - len_after > 1){
print("yes")
marker <- list.files(folder_name, pattern = "marker", recursive = T, full.names = T)
# Reading the files
marker_list <- lapply(marker, function(x) data.table::fread(x, skip = 1, header = FALSE))
marker_list <- lapply(marker_list, function(x) x[,2:length(x)])
marker_list <- lapply(marker_list, function(x) data.table::setnames(x, paste0(rep("Mean", length(x)), seq(1: length(x)))))
print(marker_list)
}
else{
marker_list <- NULL
}
# Code pour récupérer uniquement le numéro du coverslip et lui ajouter une lettre :
index_cov <-length(stringr::str_split(myFiles[[1]], "/")[[1]])
coverslip_id <- lapply(myFiles, function(x) as.integer(stringr::str_replace_all(stringr::str_split(x, "/")[[1]][index_cov], "[.csv.]", "")))
letter_list <- LETTERS[seq(from = 1, to = length(myFiles))]
if(length(letter_list[which(is.na(letter_list))]) != 0){
print( "HOUKAL")
na_cov <- length(letter_list[which(is.na(letter_list))])
second_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
third_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
dbl <- paste0(second_letter_list, third_letter_list)
letter_list[which(is.na(letter_list))] <- dbl
}
coverslip_id <- purrr::map2(letter_list, coverslip_id, function(x,y) paste(x,y,sep =""))
# Fetching the stimuli informations :
meta_df <- data.table::fread(meta)
stimuli <- meta_df$stimuli
stimuli <- split(stimuli, ceiling(seq_along(stimuli)/stim_number))
stimuli <- lapply(stimuli, function(x) purrr::map2(seq_along(1:stim_number), x, function(y, z) paste(y,z, sep=".")))
# now the time informations :
each <- meta_df$timing
each <- split(each, ceiling(seq_along(each)/stim_number))
# Get the pattern to find in the colnames for the cell_srt function :
pattern <- substr(colnames(df_list[[1]])[2], 1,4)
### Code pour récupérer uniquement le groupe auquel appartient un coverslip
index_gr <-length(stringr::str_split(myFiles[[1]], "/")[[1]])-2
group_list <- lapply(myFiles, function(x) stringr::str_split(x, "/")[[1]][index_gr])
if(compare_groups == TRUE) {
for(i in 1:length(df_list)){
# voir pour executer tidy_df sur chaque élément de df_list via un pmap ? :
df_list[[i]] <- tidy_df(df_list[[i]],stimuli[[i]], each[[i]], pattern,
duration_in_seconds, frame_rate, coverslip_id = coverslip_id[[i]], id = i,
multiple = TRUE, compare_groups = TRUE, group_list[[i]], marker_list[[i]], marker_thresh)
}
}
if(compare_groups == FALSE) {
for(i in 1:length(df_list)){
df_list[[i]] <- tidy_df(df_list[[i]],stimuli[[i]], each[[i]], pattern, duration_in_seconds,
frame_rate, coverslip_id = i, id = i, multiple = TRUE, compare_groups = FALSE,
group_list[[i]], marker_list[[i]], marker_thresh)
}
}
df <- do.call(rbind, df_list)
df$marker_positive <- as.factor(df$marker_positive)
df$group <- as.factor(df$group)
df$stimulus <- as.factor(df$stimulus)
df$coverslip <- as.factor(df$coverslip)
print(df)
#write.csv(df, "df_manip_maxime.csv")
return(df)
}
launch_GuiGui()
#' createId
#'
#' @param df
#' @param coverslip_id
#'
#' @return
#' @export
#'
#' @examples
createId <- function(df, coverslip_id){
cells <- names(table(df$Cell_id))
print(cells)
print("cells")
# initializing an empty list
id_list <- vector(mode = "list", length = length(cells))
# splitting the cells in chunks of 26 (letters of the alphabet)
# to be able to iterate over the chunks
cells <- split(cells, ceiling(seq_along(cells)/26))
print(cells)
# there are more than 26 chunks so resplitting the chunks
cells <- split(cells, ceiling(seq_along(cells)/26))
print(cells)
list_index = 1
index1 = 1
if(is.na(coverslip_id)) {
a <- LETTERS[sample.int(26,1)]
b <- LETTERS[sample.int(26,1)]
c <- LETTERS[sample.int(26,1)]
w <- paste0(paste0(a,b),c)
}
else{
w <- letters[coverslip_id]
}
if(length(w[which(is.na(w))]) != 0){
print( "HOUKAL")
na_cov <- length(w[which(is.na(w))])
second_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
third_letter_list <- LETTERS[seq(from = 1, to = length(na_cov))]
dbl <- paste0(second_letter_list, third_letter_list)
w[which(is.na(w))] <- dbl
}
for(i in cells){
x <- letters[index1]
index1 = index1 + 1
index2 = 1
for(j in i) {
y <- letters[index2]
index2 = index2 + 1
index3 = 1
for(h in j){
z <- letters[index3]
#id <- paste0(w,x,y,z)
id <- paste0(w,x,y,z)
id_list[[list_index]] <- id
list_index = list_index + 1
index3 = index3 + 1
}
}
}
return(id_list)
}
launch_GuiGui()
library(calipR)
